{
 "exception":"EOF while scanning triple-quoted string literal (<unknown>, line 5551)",
 "traceback":[
  "Traceback (most recent call last):",
  "  File \"/root/repo/cf-scripts/conda_forge_tick/audit.py\", line 68, in main",
  "    deps = audit_feedstock(fctx, ctx)",
  "  File \"/root/repo/cf-scripts/conda_forge_tick/audit.py\", line 33, in audit_feedstock",
  "    deps = simple_import_search(cb_work_dir, remap=True)",
  "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/depfinder/main.py\", line 336, in simple_import_search",
  "    for mod, path, catcher in catchers:",
  "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/depfinder/main.py\", line 295, in iterate_over_library",
  "    yield parse_file(full_file_path)",
  "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/depfinder/main.py\", line 264, in parse_file",
  "    catcher = get_imported_libs(code)",
  "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/depfinder/main.py\", line 238, in get_imported_libs",
  "    tree = ast.parse(code)",
  "  File \"/opt/conda/envs/run_env/lib/python3.7/ast.py\", line 35, in parse",
  "    return compile(source, filename, mode, PyCF_ONLY_AST)",
  "  File \"<unknown>\", line 5551",
  "    raise ValueError(\"\"\"Table reservation entry must be a 2-tuple of the following form:",
  "element 0: sharing mode (one of (isc_tpb_shared, isc_tpb_protected, isc_tpb_exclusive))",
  "element 1: access mode (one of (isc_tpb_lock_read, isc_tpb_lock_write))",
  "        if other_values is None:",
  "            value = [value]",
  "        else:",
  "            other_values.append(value)",
  "            value = other_values",
  "        self._res[key] = value",
  "",
  "def _validateKey(key):",
  "    ### Todo: verify handling of P version differences, refactor",
  "    if PYTHON_MAJOR_VER == 3:",
  "        acceptable_key = isinstance(key, str)",
  "        if acceptable_key and isinstance(key, str):",
  "            try:",
  "                key.encode('ASCII')",
  "            except UnicodeEncodeError:",
  "                acceptable_key = False",
  "        if not acceptable_key:",
  "            raise TypeError('Only str keys are allowed.')",
  "    else:",
  "        acceptable_key = isinstance(key, basestring)",
  "        if acceptable_key and isinstance(key, unicode):",
  "            try:",
  "                key = key.encode('ASCII')",
  "            except UnicodeEncodeError:",
  "                acceptable_key = False",
  "        if not acceptable_key:",
  "            raise TypeError('Only str keys are allowed.')",
  "    return key",
  "",
  "def _validate_tpb(tpb):",
  "    if isinstance(tpb, TPB):",
  "        # TPB's accessor methods perform their own validation, and its",
  "        # render method takes care of infrastructural trivia.",
  "        return tpb",
  "    elif isinstance(tpb, (ListType, TupleType)):",
  "        return tpb",
  "    elif not (isinstance(tpb, mybytes) and len(tpb) > 0):",
  "        raise ProgrammingError('TPB must be non-unicode string of length > 0')",
  "    # The kinterbasdb documentation promises (or at least strongly implies)",
  "    # that if the user tries to set a TPB that does not begin with",
  "    # isc_tpb_version3, kinterbasdb will automatically supply that",
  "    # infrastructural value.  This promise might cause problems in the future,",
  "    # when isc_tpb_version3 is superseded.  A possible solution would be to",
  "    # check the first byte against all known isc_tpb_versionX version flags,",
  "    # like this:",
  "    #   if tpb[0] not in (isc_tpb_version3, ..., isc_tpb_versionN):",
  "    #      tpb = isc_tpb_version3 + tpb",
  "    # That way, compatibility with old versions of the DB server would be",
  "    # maintained, but client code could optionally specify a newer TPB version.",
  "    if tpb[0] != isc_tpb_version3:",
  "        tpb = isc_tpb_version3 + tpb",
  "    return tpb",
  "",
  "def _normalize_db_identifier(ident):",
  "    if ident.startswith('\"') and ident.endswith('\"'):",
  "        # Quoted name; leave the case of the field name untouched, but",
  "        # strip the quotes.",
  "        return ident[1:-1]",
  "    else:",
  "        # Everything else is normalized to uppercase to support case-",
  "        # insensitive lookup.",
  "        return ident.upper()",
  "                                                                                        ",
  "                                                                                       ",
  "                                                                       ",
  "                                ",
  "                           ",
  "             ",
  "                                      ",
  "                                ",
  "                              ",
  "",
  "                      ",
  "                                                                ",
  "                             ",
  "                                             ",
  "                                                   ",
  "                ",
  "                                   ",
  "                                      ",
  "                                      ",
  "                              ",
  "                                                         ",
  "         ",
  "                                                    ",
  "                                                       ",
  "                ",
  "                                         ",
  "                                      ",
  "                                      ",
  "                              ",
  "                                                         ",
  "              ",
  "",
  "                       ",
  "                            ",
  "                                                                      ",
  "                                                             ",
  "                  ",
  "                                                ",
  "                  ",
  "                                                         ",
  "                                                                              ",
  "                                                                           ",
  "                                                                  ",
  "                                                                  ",
  "                                                                              ",
  "                                                                           ",
  "                                                                            ",
  "                ",
  "                                                                   ",
  "                                       ",
  "                                                                         ",
  "                                                                               ",
  "                                  ",
  "                                    ",
  "              ",
  "",
  "                                    ",
  "                                                     ",
  "                                                                      ",
  "                           ",
  "                          ",
  "         ",
  "                                                                     ",
  "                             ",
  "                           ^",
  "SyntaxError: EOF while scanning triple-quoted string literal",
  ""
 ]
}