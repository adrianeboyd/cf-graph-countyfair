{
 "exception":"EOF while scanning triple-quoted string literal (<unknown>, line 113)",
 "traceback":[
  "Traceback (most recent call last):",
  "  File \"/root/repo/cf-scripts/conda_forge_tick/audit.py\", line 68, in main",
  "    deps = audit_feedstock(fctx, ctx)",
  "  File \"/root/repo/cf-scripts/conda_forge_tick/audit.py\", line 33, in audit_feedstock",
  "    deps = simple_import_search(cb_work_dir, remap=True)",
  "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/depfinder/main.py\", line 336, in simple_import_search",
  "    for mod, path, catcher in catchers:",
  "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/depfinder/main.py\", line 295, in iterate_over_library",
  "    yield parse_file(full_file_path)",
  "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/depfinder/main.py\", line 264, in parse_file",
  "    catcher = get_imported_libs(code)",
  "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/depfinder/main.py\", line 238, in get_imported_libs",
  "    tree = ast.parse(code)",
  "  File \"/opt/conda/envs/run_env/lib/python3.7/ast.py\", line 35, in parse",
  "    return compile(source, filename, mode, PyCF_ONLY_AST)",
  "  File \"<unknown>\", line 113",
  "    report = \"\"\"\\",
  "---------------------------------------------------------------------------",
  "Joblib worker traceback:",
  "---------------------------------------------------------------------------",
  "        # Unwrap the exception to a JoblibException",
  "        exception_type = _mk_exception(self.etype)[0]",
  "        return exception_type(report)",
  "",
  "",
  "_exception_mapping = dict()",
  "",
  "",
  "def _mk_exception(exception, name=None):",
  "    if issubclass(exception, JoblibException):",
  "        # No need to wrap recursively JoblibException",
  "        return exception, exception.__name__",
  "",
  "    # Create an exception inheriting from both JoblibException",
  "    # and that exception",
  "    if name is None:",
  "        name = exception.__name__",
  "    this_name = 'Joblib%s' % name",
  "    if this_name in _exception_mapping:",
  "        # Avoid creating twice the same exception",
  "        this_exception = _exception_mapping[this_name]",
  "    else:",
  "        if exception is Exception:",
  "            # JoblibException is already a subclass of Exception. No",
  "            # need to use multiple inheritance",
  "            return JoblibException, this_name",
  "        try:",
  "            this_exception = type(",
  "                this_name, (JoblibException, exception), {})",
  "            _exception_mapping[this_name] = this_exception",
  "        except TypeError:",
  "            # This happens if \"Cannot create a consistent method",
  "            # resolution order\", e.g. because 'exception' is a",
  "            # subclass of JoblibException or 'exception' is not an",
  "            # acceptable base class",
  "            this_exception = JoblibException",
  "",
  "    return this_exception, this_name",
  "",
  "",
  "def _mk_common_exceptions():",
  "    namespace = dict()",
  "    import builtins as _builtin_exceptions",
  "    common_exceptions = filter(",
  "        lambda x: x.endswith('Error'),",
  "        dir(_builtin_exceptions))",
  "",
  "    for name in common_exceptions:",
  "        obj = getattr(_builtin_exceptions, name)",
  "        if isinstance(obj, type) and issubclass(obj, BaseException):",
  "            this_obj, this_name = _mk_exception(obj, name=name)",
  "            namespace[this_name] = this_obj",
  "    return namespace",
  "",
  "",
  "# Updating module locals so that the exceptions pickle right. AFAIK this",
  "# works only at module-creation time",
  "locals().update(_mk_common_exceptions())",
  "                 ",
  "                                                                           ",
  "                        ",
  "                                                                           ",
  "                                                   ",
  "                                                     ",
  "                                     ",
  "",
  "",
  "                           ",
  "",
  "",
  "                                        ",
  "                                              ",
  "                                                     ",
  "                                            ",
  "",
  "                                                              ",
  "                        ",
  "                    ",
  "                                 ",
  "                                 ",
  "                                       ",
  "                                                 ",
  "                                                      ",
  "         ",
  "                                  ",
  "                                                                    ",
  "                                              ",
  "                                             ",
  "            ",
  "                                  ",
  "                                                            ",
  "                                                          ",
  "                         ",
  "                                                                ",
  "                                                              ",
  "                                                                  ",
  "                                   ",
  "                                            ",
  "",
  "                                    ",
  "",
  "",
  "                            ",
  "                      ",
  "                                          ",
  "                               ",
  "                                      ",
  "                                 ",
  "",
  "                                  ",
  "                                                ",
  "                                                                    ",
  "                                                               ",
  "                                           ",
  "                    ",
  "",
  "",
  "                                                                        ",
  "                                    ",
  "                                       ^",
  "SyntaxError: EOF while scanning triple-quoted string literal",
  ""
 ]
}