{
 "exception":"EOF while scanning triple-quoted string literal (<unknown>, line 173)",
 "traceback":[
  "Traceback (most recent call last):",
  "  File \"/root/repo/cf-scripts/conda_forge_tick/audit.py\", line 67, in main",
  "    deps = audit_feedstock(fctx, ctx)",
  "  File \"/root/repo/cf-scripts/conda_forge_tick/audit.py\", line 33, in audit_feedstock",
  "    deps = simple_import_search(cb_work_dir, remap=True)",
  "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/depfinder/main.py\", line 336, in simple_import_search",
  "    for mod, path, catcher in catchers:",
  "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/depfinder/main.py\", line 295, in iterate_over_library",
  "    yield parse_file(full_file_path)",
  "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/depfinder/main.py\", line 264, in parse_file",
  "    catcher = get_imported_libs(code)",
  "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/depfinder/main.py\", line 238, in get_imported_libs",
  "    tree = ast.parse(code)",
  "  File \"/opt/conda/envs/run_env/lib/python3.7/ast.py\", line 35, in parse",
  "    return compile(source, filename, mode, PyCF_ONLY_AST)",
  "  File \"<unknown>\", line 173",
  "    usage = \"\"\"",
  "",
  "default_values = {",
  "    \"ktype\": \"dsa\",",
  "    \"bits\": 1024,",
  "    \"filename\": \"output\",",
  "    \"comment\": \"\",",
  "}",
  "",
  "key_dispatch_table = {\"dsa\": DSSKey, \"rsa\": RSAKey}",
  "",
  "",
  "def progress(arg=None):",
  "",
  "    if not arg:",
  "        sys.stdout.write(\"0%\\x08\\x08\\x08 \")",
  "        sys.stdout.flush()",
  "    elif arg[0] == \"p\":",
  "        sys.stdout.write(\"25%\\x08\\x08\\x08\\x08 \")",
  "        sys.stdout.flush()",
  "    elif arg[0] == \"h\":",
  "        sys.stdout.write(\"50%\\x08\\x08\\x08\\x08 \")",
  "        sys.stdout.flush()",
  "    elif arg[0] == \"x\":",
  "        sys.stdout.write(\"75%\\x08\\x08\\x08\\x08 \")",
  "        sys.stdout.flush()",
  "",
  "",
  "if __name__ == \"__main__\":",
  "",
  "    phrase = None",
  "    pfunc = None",
  "",
  "    parser = OptionParser(usage=usage)",
  "    parser.add_option(",
  "        \"-t\",",
  "        \"--type\",",
  "        type=\"string\",",
  "        dest=\"ktype\",",
  "        help=\"Specify type of key to create (dsa or rsa)\",",
  "        metavar=\"ktype\",",
  "        default=default_values[\"ktype\"],",
  "    )",
  "    parser.add_option(",
  "        \"-b\",",
  "        \"--bits\",",
  "        type=\"int\",",
  "        dest=\"bits\",",
  "        help=\"Number of bits in the key to create\",",
  "        metavar=\"bits\",",
  "        default=default_values[\"bits\"],",
  "    )",
  "    parser.add_option(",
  "        \"-N\",",
  "        \"--new-passphrase\",",
  "        dest=\"newphrase\",",
  "        help=\"Provide new passphrase\",",
  "        metavar=\"phrase\",",
  "    )",
  "    parser.add_option(",
  "        \"-P\",",
  "        \"--old-passphrase\",",
  "        dest=\"oldphrase\",",
  "        help=\"Provide old passphrase\",",
  "        metavar=\"phrase\",",
  "    )",
  "    parser.add_option(",
  "        \"-f\",",
  "        \"--filename\",",
  "        type=\"string\",",
  "        dest=\"filename\",",
  "        help=\"Filename of the key file\",",
  "        metavar=\"filename\",",
  "        default=default_values[\"filename\"],",
  "    )",
  "    parser.add_option(",
  "        \"-q\", \"--quiet\", default=False, action=\"store_false\", help=\"Quiet\"",
  "    )",
  "    parser.add_option(",
  "        \"-v\", \"--verbose\", default=False, action=\"store_true\", help=\"Verbose\"",
  "    )",
  "    parser.add_option(",
  "        \"-C\",",
  "        \"--comment\",",
  "        type=\"string\",",
  "        dest=\"comment\",",
  "        help=\"Provide a new comment\",",
  "        metavar=\"comment\",",
  "        default=default_values[\"comment\"],",
  "    )",
  "",
  "    (options, args) = parser.parse_args()",
  "",
  "    if len(sys.argv) == 1:",
  "        parser.print_help()",
  "        sys.exit(0)",
  "",
  "    for o in list(default_values.keys()):",
  "        globals()[o] = getattr(options, o, default_values[o.lower()])",
  "",
  "    if options.newphrase:",
  "        phrase = getattr(options, \"newphrase\")",
  "",
  "    if options.verbose:",
  "        pfunc = progress",
  "        sys.stdout.write(",
  "            \"Generating priv/pub %s %d bits key pair (%s/%s.pub)...\"",
  "            % (ktype, bits, filename, filename)",
  "        )",
  "        sys.stdout.flush()",
  "",
  "    if ktype == \"dsa\" and bits > 1024:",
  "        raise SSHException(\"DSA Keys must be 1024 bits\")",
  "",
  "    if ktype not in key_dispatch_table:",
  "        raise SSHException(",
  "            \"Unknown %s algorithm to generate keys pair\" % ktype",
  "        )",
  "",
  "    # generating private key",
  "    prv = key_dispatch_table[ktype].generate(bits=bits, progress_func=pfunc)",
  "    prv.write_private_key_file(filename, password=phrase)",
  "",
  "    # generating public key",
  "    pub = key_dispatch_table[ktype](filename=filename, password=phrase)",
  "    with open(\"%s.pub\" % filename, \"w\") as f:",
  "        f.write(\"%s %s\" % (pub.get_name(), pub.get_base64()))",
  "        if options.comment:",
  "            f.write(\" %s\" % comment)",
  "",
  "    if options.verbose:",
  "        print(\"done.\")",
  "",
  "    hash = u(hexlify(pub.get_fingerprint()))",
  "    print(",
  "        \"Fingerprint: %d %s %s.pub (%s)\"",
  "        % (",
  "            bits,",
  "            \":\".join([hash[i : 2 + i] for i in range(0, len(hash), 2)]),",
  "            filename,",
  "            ktype.upper(),",
  "        )",
  "    )",
  "               ",
  "",
  "                  ",
  "                   ",
  "                 ",
  "                         ",
  "                  ",
  " ",
  "",
  "                                                   ",
  "",
  "",
  "                       ",
  "",
  "               ",
  "                                           ",
  "                          ",
  "                       ",
  "                                                ",
  "                          ",
  "                       ",
  "                                                ",
  "                          ",
  "                       ",
  "                                                ",
  "                          ",
  "",
  "",
  "                          ",
  "",
  "                 ",
  "                ",
  "",
  "                                      ",
  "                      ",
  "             ",
  "                 ",
  "                      ",
  "                     ",
  "                                                          ",
  "                        ",
  "                                        ",
  "     ",
  "                      ",
  "             ",
  "                 ",
  "                   ",
  "                    ",
  "                                                   ",
  "                       ",
  "                                       ",
  "     ",
  "                      ",
  "             ",
  "                           ",
  "                         ",
  "                                      ",
  "                         ",
  "     ",
  "                      ",
  "             ",
  "                           ",
  "                         ",
  "                                      ",
  "                         ",
  "     ",
  "                      ",
  "             ",
  "                     ",
  "                      ",
  "                        ",
  "                                        ",
  "                           ",
  "                                           ",
  "     ",
  "                      ",
  "                                                                          ",
  "     ",
  "                      ",
  "                                                                             ",
  "     ",
  "                      ",
  "             ",
  "                    ",
  "                      ",
  "                       ",
  "                                     ",
  "                          ",
  "                                          ",
  "     ",
  "",
  "                                         ",
  "",
  "                          ",
  "                           ",
  "                   ",
  "",
  "                                         ",
  "                                                                     ",
  "",
  "                         ",
  "                                              ",
  "",
  "                       ",
  "                        ",
  "                         ",
  "                                                                    ",
  "                                               ",
  "         ",
  "                          ",
  "",
  "                                      ",
  "                                                        ",
  "",
  "                                       ",
  "                           ",
  "                                                                ",
  "         ",
  "",
  "                            ",
  "                                                                            ",
  "                                                         ",
  "",
  "                           ",
  "                                                                       ",
  "                                             ",
  "                                                             ",
  "                           ",
  "                                    ",
  "",
  "                       ",
  "                      ",
  "",
  "                                            ",
  "          ",
  "                                        ",
  "           ",
  "                 ",
  "                                                                        ",
  "                     ",
  "                          ",
  "         ",
  "    ^",
  "SyntaxError: EOF while scanning triple-quoted string literal",
  ""
 ]
}