{
 "exception":"invalid syntax (<unknown>, line 107)",
 "traceback":[
  "Traceback (most recent call last):",
  "  File \"/root/repo/cf-scripts/conda_forge_tick/audit.py\", line 67, in main",
  "    deps = audit_feedstock(fctx, ctx)",
  "  File \"/root/repo/cf-scripts/conda_forge_tick/audit.py\", line 33, in audit_feedstock",
  "    deps = simple_import_search(cb_work_dir, remap=True)",
  "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/depfinder/main.py\", line 336, in simple_import_search",
  "    for mod, path, catcher in catchers:",
  "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/depfinder/main.py\", line 295, in iterate_over_library",
  "    yield parse_file(full_file_path)",
  "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/depfinder/main.py\", line 264, in parse_file",
  "    catcher = get_imported_libs(code)",
  "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/depfinder/main.py\", line 238, in get_imported_libs",
  "    tree = ast.parse(code)",
  "  File \"/opt/conda/envs/run_env/lib/python3.7/ast.py\", line 35, in parse",
  "    return compile(source, filename, mode, PyCF_ONLY_AST)",
  "  File \"<unknown>\", line 107",
  "    extra_text = \"\"\"def adjust_options(options, args):",
  "    args[:] = ['%s']",
  "def after_install(options, home_dir):",
  "    if sys.platform == 'win32':",
  "        bin_dir = join(home_dir, 'Scripts')",
  "    else:",
  "        bin_dir = join(home_dir, 'bin')",
  "    if paver_command_line:",
  "        command_list = list(paver_command_line.split())",
  "        extra_text += \"    subprocess.call([join(bin_dir, 'paver'),%s)\" % repr(command_list)[1:]",
  "",
  "    extra_text += more_text",
  "    if has_virtualenv:",
  "        bootstrap_contents = venv.create_bootstrap_script(extra_text)",
  "    else:",
  "        raise BuildFailure(VIRTUALENV_MISSING_ERROR)",
  "    fn = script_name",
  "",
  "    debug(\"Bootstrap script extra text: \" + extra_text)",
  "    def write_script():",
  "        open(fn, \"w\").write(bootstrap_contents)",
  "    dry(\"Write bootstrap script %s\" % fn, write_script)",
  "",
  "",
  "def _boostrap_constraint():",
  "    try:",
  "        import virtualenv as venv",
  "    except ImportError:",
  "        raise BuildFailure(VIRTUALENV_MISSING_ERROR)",
  "",
  "",
  "@task",
  "def bootstrap():",
  "    \"\"\"Creates a virtualenv bootstrap script.",
  "                                                      ",
  "                    ",
  "                                     ",
  "                               ",
  "                                           ",
  "         ",
  "                                       ",
  "                          ",
  "                                                       ",
  "                                                                                                ",
  "",
  "                           ",
  "                      ",
  "                                                                     ",
  "         ",
  "                                                    ",
  "                    ",
  "",
  "                                                       ",
  "                       ",
  "                                               ",
  "                                                       ",
  "",
  "",
  "                           ",
  "        ",
  "                                 ",
  "                       ",
  "                                                    ",
  "",
  "",
  "     ",
  "                ",
  "             ^",
  "SyntaxError: invalid syntax",
  ""
 ]
}