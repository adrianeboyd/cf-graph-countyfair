{
 "exception":"EOF while scanning triple-quoted string literal (<unknown>, line 69)",
 "traceback":[
  "Traceback (most recent call last):",
  "  File \"/root/repo/cf-scripts/conda_forge_tick/audit.py\", line 67, in main",
  "    deps = audit_feedstock(fctx, ctx)",
  "  File \"/root/repo/cf-scripts/conda_forge_tick/audit.py\", line 33, in audit_feedstock",
  "    deps = simple_import_search(cb_work_dir, remap=True)",
  "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/depfinder/main.py\", line 336, in simple_import_search",
  "    for mod, path, catcher in catchers:",
  "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/depfinder/main.py\", line 295, in iterate_over_library",
  "    yield parse_file(full_file_path)",
  "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/depfinder/main.py\", line 264, in parse_file",
  "    catcher = get_imported_libs(code)",
  "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/depfinder/main.py\", line 238, in get_imported_libs",
  "    tree = ast.parse(code)",
  "  File \"/opt/conda/envs/run_env/lib/python3.7/ast.py\", line 35, in parse",
  "    return compile(source, filename, mode, PyCF_ONLY_AST)",
  "  File \"<unknown>\", line 69",
  "    self.assertEqual(outputs, expectedOutputs, '''\\",
  "for input:",
  "expected outputs:",
  "but got:",
  "        return w",
  "",
  "    if not hasattr(unittest.TestCase, 'assertIs'):",
  "",
  "        def assertIs(self, expr1, expr2, msg=None):",
  "            if expr1 is not expr2:",
  "                self.fail(msg or '%r is not %r' % (expr1, expr2))",
  "",
  "    if not hasattr(unittest.TestCase, 'assertIsInstance'):",
  "",
  "        def assertIsInstance(self, obj, cls, msg=None):",
  "            \"\"\"Same as self.assertTrue(isinstance(obj, cls)).\"\"\"",
  "            if not isinstance(obj, cls):",
  "                self.fail(msg or '%r is not an instance of %r' % (obj, cls))",
  "",
  "    if not hasattr(unittest.TestCase, 'assertNotIsInstance'):",
  "",
  "        def assertNotIsInstance(self, obj, cls, msg=None):",
  "            \"\"\"Same as self.assertFalse(isinstance(obj, cls)).\"\"\"",
  "            if isinstance(obj, cls):",
  "                self.fail(msg or '%r is an instance of %r' % (obj, cls))",
  "",
  "    if not hasattr(unittest.TestCase, 'assertIn'):",
  "",
  "        def assertIn(self, member, container, msg=None):",
  "            \"\"\"Just like self.assertTrue(a in b).\"\"\"",
  "            if member not in container:",
  "                self.fail(msg or '%r not found in %r' % (member, container))",
  "",
  "    if not hasattr(unittest.TestCase, 'assertNotIn'):",
  "",
  "        def assertNotIn(self, member, container, msg=None):",
  "            \"\"\"Just like self.assertTrue(a not in b).\"\"\"",
  "            if member in container:",
  "                self.fail(msg or",
  "                          '%r unexpectedly found in %r' % (member, container))",
  "                                                   ",
  "          ",
  "                 ",
  "        ",
  "                ",
  "",
  "                                                  ",
  "",
  "                                                   ",
  "                                  ",
  "                                                                 ",
  "",
  "                                                          ",
  "",
  "                                                       ",
  "                                                                ",
  "                                        ",
  "                                                                            ",
  "",
  "                                                             ",
  "",
  "                                                          ",
  "                                                                 ",
  "                                    ",
  "                                                                        ",
  "",
  "                                                  ",
  "",
  "                                                        ",
  "                                                    ",
  "                                       ",
  "                                                                            ",
  "",
  "                                                     ",
  "",
  "                                                           ",
  "                                                        ",
  "                                   ",
  "                                ",
  "                                                                             ^",
  "SyntaxError: EOF while scanning triple-quoted string literal",
  ""
 ]
}