{
 "exception":"invalid syntax (<unknown>, line 170)",
 "traceback":[
  "Traceback (most recent call last):",
  "  File \"/root/repo/cf-scripts/conda_forge_tick/audit.py\", line 67, in main",
  "    deps = audit_feedstock(fctx, ctx)",
  "  File \"/root/repo/cf-scripts/conda_forge_tick/audit.py\", line 33, in audit_feedstock",
  "    deps = simple_import_search(cb_work_dir, remap=True)",
  "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/depfinder/main.py\", line 336, in simple_import_search",
  "    for mod, path, catcher in catchers:",
  "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/depfinder/main.py\", line 295, in iterate_over_library",
  "    yield parse_file(full_file_path)",
  "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/depfinder/main.py\", line 264, in parse_file",
  "    catcher = get_imported_libs(code)",
  "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/depfinder/main.py\", line 238, in get_imported_libs",
  "    tree = ast.parse(code)",
  "  File \"/opt/conda/envs/run_env/lib/python3.7/ast.py\", line 35, in parse",
  "    return compile(source, filename, mode, PyCF_ONLY_AST)",
  "  File \"<unknown>\", line 170",
  "    message_frame = '''MESSAGE",
  "content-type:text/plain",
  "",
  "",
  "        self.server.add_frame(message_frame)",
  "        self.server.add_frame('\\n')",
  "        expected_heartbeat_count += 1",
  "",
  "        pump(2)",
  "",
  "        listener.wait_for_heartbeat()",
  "        headers, body = listener.get_latest_message()",
  "",
  "        self.assertEqual(expected_heartbeat_count, listener.heartbeat_count)",
  "        self.assertEqual({\"content-type\": \"text/plain\"}, headers)",
  "        self.assertEqual(message_body, body)",
  "",
  "        # Trailing EOL, separate heartbeat, another message",
  "",
  "        self.server.add_frame(message_frame + '\\n')",
  "        self.server.add_frame('\\n')",
  "        self.server.add_frame(message_frame + '\\n')",
  "        expected_heartbeat_count += 1",
  "",
  "        pump(3)",
  "",
  "        listener.wait_for_heartbeat()",
  "        listener.wait_for_message()",
  "        headers, body = listener.get_latest_message()",
  "",
  "        self.assertEqual(expected_heartbeat_count, listener.heartbeat_count)",
  "        self.assertEqual({\"content-type\": \"text/plain\"}, headers)",
  "        self.assertEqual(message_body, body)",
  "",
  "        # Torture tests: return content one byte at a time",
  "",
  "        self.server.add_frame('\\n')",
  "        for c in message_frame:",
  "            self.server.add_frame(c)",
  "        self.server.add_frame('\\n')",
  "        expected_heartbeat_count += 2",
  "",
  "        pump(len(message_frame) + 2)",
  "",
  "        listener.wait_for_heartbeat()",
  "        headers, body = listener.get_latest_message()",
  "",
  "        self.assertEqual(expected_heartbeat_count, listener.heartbeat_count)",
  "        self.assertEqual({\"content-type\": \"text/plain\"}, headers)",
  "        self.assertEqual(message_body, body)",
  "",
  "        # ...and a similar one with content-length and null bytes in body",
  "",
  "        message_body = '%s\\x00\\x00%s' % (message_body, message_body)",
  "        message_frame = '''MESSAGE",
  "                              ",
  "                       ",
  "",
  "",
  "                                            ",
  "                                   ",
  "                                     ",
  "",
  "               ",
  "",
  "                                     ",
  "                                                     ",
  "",
  "                                                                            ",
  "                                                                 ",
  "                                            ",
  "",
  "                                                           ",
  "",
  "                                                   ",
  "                                   ",
  "                                                   ",
  "                                     ",
  "",
  "               ",
  "",
  "                                     ",
  "                                   ",
  "                                                     ",
  "",
  "                                                                            ",
  "                                                                 ",
  "                                            ",
  "",
  "                                                          ",
  "",
  "                                   ",
  "                               ",
  "                                    ",
  "                                   ",
  "                                     ",
  "",
  "                                    ",
  "",
  "                                     ",
  "                                                     ",
  "",
  "                                                                            ",
  "                                                                 ",
  "                                            ",
  "",
  "                                                                         ",
  "",
  "                                                                    ",
  "                                 ^",
  "SyntaxError: invalid syntax",
  ""
 ]
}