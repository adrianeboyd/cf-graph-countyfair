{
 "exception":"EOF while scanning triple-quoted string literal (<unknown>, line 585)",
 "traceback":[
  "Traceback (most recent call last):",
  "  File \"/root/repo/cf-scripts/conda_forge_tick/audit.py\", line 67, in main",
  "    deps = audit_feedstock(fctx, ctx)",
  "  File \"/root/repo/cf-scripts/conda_forge_tick/audit.py\", line 33, in audit_feedstock",
  "    deps = simple_import_search(cb_work_dir, remap=True)",
  "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/depfinder/main.py\", line 336, in simple_import_search",
  "    for mod, path, catcher in catchers:",
  "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/depfinder/main.py\", line 295, in iterate_over_library",
  "    yield parse_file(full_file_path)",
  "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/depfinder/main.py\", line 264, in parse_file",
  "    catcher = get_imported_libs(code)",
  "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/depfinder/main.py\", line 238, in get_imported_libs",
  "    tree = ast.parse(code)",
  "  File \"/opt/conda/envs/run_env/lib/python3.7/ast.py\", line 35, in parse",
  "    return compile(source, filename, mode, PyCF_ONLY_AST)",
  "  File \"<unknown>\", line 585",
  "    ques = \"\"\"The authenticity of host '%s' can't be established.\\r",
  "                                {b'ssh-dss':'DSA', b'ssh-rsa':'RSA'}[keyType],",
  "                                fingerprint)",
  "            ques+='\\r\\nAre you sure you want to continue connecting (yes/no)? '",
  "            return deferredAskFrame(ques, 1).addCallback(self._cbVerifyHostKey, pubKey, khHost, keyType)",
  "",
  "    def _cbVerifyHostKey(self, ans, pubKey, khHost, keyType):",
  "        if ans.lower() not in ('yes', 'no'):",
  "            return deferredAskFrame(\"Please type  'yes' or 'no': \",1).addCallback(self._cbVerifyHostKey, pubKey, khHost, keyType)",
  "        if ans.lower() == 'no':",
  "            frame.write('Host key verification failed.\\r\\n')",
  "            raise error.ConchError('bad host key')",
  "        try:",
  "            frame.write(",
  "                \"Warning: Permanently added '%s' (%s) to the list of \"",
  "                \"known hosts.\\r\\n\" %",
  "                (khHost, {b'ssh-dss':'DSA', b'ssh-rsa':'RSA'}[keyType]))",
  "            with open(os.path.expanduser('~/.ssh/known_hosts'), 'a') as known_hosts:",
  "                encodedKey = base64.encodestring(pubKey).replace(b'\\n', b'')",
  "                known_hosts.write('\\n%s %s %s' % (khHost, keyType, encodedKey))",
  "        except:",
  "            log.deferr()",
  "            raise error.ConchError",
  "",
  "    def connectionSecure(self):",
  "        if options['user']:",
  "            user = options['user']",
  "        else:",
  "            user = getpass.getuser()",
  "        self.requestService(SSHUserAuthClient(user, SSHConnection()))",
  "",
  "class SSHUserAuthClient(userauth.SSHUserAuthClient):",
  "    usedFiles = []",
  "",
  "    def getPassword(self, prompt = None):",
  "        if not prompt:",
  "            prompt = \"%s@%s's password: \" % (self.user, options['host'])",
  "        return deferredAskFrame(prompt,0)",
  "",
  "    def getPublicKey(self):",
  "        files = [x for x in options.identitys if x not in self.usedFiles]",
  "        if not files:",
  "            return None",
  "        file = files[0]",
  "        log.msg(file)",
  "        self.usedFiles.append(file)",
  "        file = os.path.expanduser(file)",
  "        file += '.pub'",
  "        if not os.path.exists(file):",
  "            return",
  "        try:",
  "            return keys.Key.fromFile(file).blob()",
  "        except:",
  "            return self.getPublicKey() # try again",
  "",
  "    def getPrivateKey(self):",
  "        file = os.path.expanduser(self.usedFiles[-1])",
  "        if not os.path.exists(file):",
  "            return None",
  "        try:",
  "            return defer.succeed(keys.Key.fromFile(file).keyObject)",
  "        except keys.BadKeyError as e:",
  "            if e.args[0] == 'encrypted key with no password':",
  "                prompt = \"Enter passphrase for key '%s': \" % \\",
  "                       self.usedFiles[-1]",
  "                return deferredAskFrame(prompt, 0).addCallback(self._cbGetPrivateKey, 0)",
  "    def _cbGetPrivateKey(self, ans, count):",
  "        file = os.path.expanduser(self.usedFiles[-1])",
  "        try:",
  "            return keys.Key.fromFile(file, password = ans).keyObject",
  "        except keys.BadKeyError:",
  "            if count == 2:",
  "                raise",
  "            prompt = \"Enter passphrase for key '%s': \" % \\",
  "                   self.usedFiles[-1]",
  "            return deferredAskFrame(prompt, 0).addCallback(self._cbGetPrivateKey, count+1)",
  "",
  "class SSHConnection(connection.SSHConnection):",
  "    def serviceStarted(self):",
  "        if not options['noshell']:",
  "            self.openChannel(SSHSession())",
  "        if options.localForwards:",
  "            for localPort, hostport in options.localForwards:",
  "                reactor.listenTCP(localPort,",
  "                            forwarding.SSHListenForwardingFactory(self,",
  "                                hostport,",
  "                                forwarding.SSHListenClientForwardingChannel))",
  "        if options.remoteForwards:",
  "            for remotePort, hostport in options.remoteForwards:",
  "                log.msg('asking for remote forwarding for %s:%s' %",
  "                        (remotePort, hostport))",
  "                data = forwarding.packGlobal_tcpip_forward(",
  "                    ('0.0.0.0', remotePort))",
  "                self.sendGlobalRequest('tcpip-forward', data)",
  "                self.remoteForwards[remotePort] = hostport",
  "",
  "class SSHSession(channel.SSHChannel):",
  "",
  "    name = b'session'",
  "",
  "    def channelOpen(self, foo):",
  "        #global globalSession",
  "        #globalSession = self",
  "        # turn off local echo",
  "        self.escapeMode = 1",
  "        c = session.SSHSessionClient()",
  "        if options['escape']:",
  "            c.dataReceived = self.handleInput",
  "        else:",
  "            c.dataReceived = self.write",
  "        c.connectionLost = self.sendEOF",
  "        frame.callback = c.dataReceived",
  "        frame.canvas.focus_force()",
  "        if options['subsystem']:",
  "            self.conn.sendRequest(self, b'subsystem', \\",
  "                common.NS(options['command']))",
  "        elif options['command']:",
  "            if options['tty']:",
  "                term = os.environ.get('TERM', 'xterm')",
  "                #winsz = fcntl.ioctl(fd, tty.TIOCGWINSZ, '12345678')",
  "                winSize = (25,80,0,0) #struct.unpack('4H', winsz)",
  "                ptyReqData = session.packRequest_pty_req(term, winSize, '')",
  "                self.conn.sendRequest(self, b'pty-req', ptyReqData)",
  "            self.conn.sendRequest(self, 'exec', \\",
  "                common.NS(options['command']))",
  "        else:",
  "            if not options['notty']:",
  "                term = os.environ.get('TERM', 'xterm')",
  "                #winsz = fcntl.ioctl(fd, tty.TIOCGWINSZ, '12345678')",
  "                winSize = (25,80,0,0) #struct.unpack('4H', winsz)",
  "                ptyReqData = session.packRequest_pty_req(term, winSize, '')",
  "                self.conn.sendRequest(self, b'pty-req', ptyReqData)",
  "            self.conn.sendRequest(self, b'shell', b'')",
  "        self.conn.transport.transport.setTcpNoDelay(1)",
  "",
  "    def handleInput(self, char):",
  "        #log.msg('handling %s' % repr(char))",
  "        if char in ('\\n', '\\r'):",
  "            self.escapeMode = 1",
  "            self.write(char)",
  "        elif self.escapeMode == 1 and char == options['escape']:",
  "            self.escapeMode = 2",
  "        elif self.escapeMode == 2:",
  "            self.escapeMode = 1 # so we can chain escapes together",
  "            if char == '.': # disconnect",
  "                log.msg('disconnecting from escape')",
  "                reactor.stop()",
  "                return",
  "            elif char == '\\x1a': # ^Z, suspend",
  "                # following line courtesy of Erwin@freenode",
  "                os.kill(os.getpid(), signal.SIGSTOP)",
  "                return",
  "            elif char == 'R': # rekey connection",
  "                log.msg('rekeying connection')",
  "                self.conn.transport.sendKexInit()",
  "                return",
  "            self.write('~' + char)",
  "        else:",
  "            self.escapeMode = 0",
  "            self.write(char)",
  "",
  "    def dataReceived(self, data):",
  "        if _PY3 and isinstance(data, bytes):",
  "            data = data.decode(\"utf-8\")",
  "        if options['ansilog']:",
  "            print(repr(data))",
  "        frame.write(data)",
  "",
  "    def extReceived(self, t, data):",
  "        if t==connection.EXTENDED_DATA_STDERR:",
  "            log.msg('got %s stderr data' % len(data))",
  "            sys.stderr.write(data)",
  "            sys.stderr.flush()",
  "",
  "    def eofReceived(self):",
  "        log.msg('got eof')",
  "        sys.stdin.close()",
  "",
  "    def closed(self):",
  "        log.msg('closed %s' % self)",
  "        if len(self.conn.channels) == 1: # just us left",
  "            reactor.stop()",
  "",
  "    def request_exit_status(self, data):",
  "        global exitStatus",
  "        exitStatus = int(struct.unpack('>L', data)[0])",
  "        log.msg('exit status: %s' % exitStatus)",
  "",
  "    def sendEOF(self):",
  "        self.conn.sendEOF(self)",
  "",
  "if __name__==\"__main__\":",
  "    run()",
  "                                                                   ",
  "                                                                              ",
  "                                            ",
  "                                                                               ",
  "                                                                                                        ",
  "",
  "                                                             ",
  "                                            ",
  "                                                                                                                                 ",
  "                               ",
  "                                                            ",
  "                                                  ",
  "            ",
  "                        ",
  "                                                                      ",
  "                                    ",
  "                                                                        ",
  "                                                                                    ",
  "                                                                            ",
  "                                                                               ",
  "               ",
  "                        ",
  "                                  ",
  "",
  "                               ",
  "                           ",
  "                                  ",
  "             ",
  "                                    ",
  "                                                                     ",
  "",
  "                                                    ",
  "                  ",
  "",
  "                                         ",
  "                      ",
  "                                                                        ",
  "                                         ",
  "",
  "                           ",
  "                                                                         ",
  "                     ",
  "                       ",
  "                       ",
  "                     ",
  "                                   ",
  "                                       ",
  "                      ",
  "                                    ",
  "                  ",
  "            ",
  "                                                 ",
  "               ",
  "                                                  ",
  "",
  "                            ",
  "                                                     ",
  "                                    ",
  "                       ",
  "            ",
  "                                                                   ",
  "                                     ",
  "                                                             ",
  "                                                              ",
  "                                         ",
  "                                                                                        ",
  "                                           ",
  "                                                     ",
  "            ",
  "                                                                    ",
  "                                ",
  "                          ",
  "                     ",
  "                                                          ",
  "                                     ",
  "                                                                                          ",
  "",
  "                                              ",
  "                             ",
  "                                  ",
  "                                          ",
  "                                 ",
  "                                                             ",
  "                                            ",
  "                                                                       ",
  "                                         ",
  "                                                                             ",
  "                                  ",
  "                                                               ",
  "                                                                  ",
  "                                               ",
  "                                                           ",
  "                                            ",
  "                                                             ",
  "                                                          ",
  "",
  "                                     ",
  "",
  "                     ",
  "",
  "                               ",
  "                             ",
  "                             ",
  "                             ",
  "                           ",
  "                                      ",
  "                             ",
  "                                             ",
  "             ",
  "                                       ",
  "                                       ",
  "                                       ",
  "                                  ",
  "                                ",
  "                                                       ",
  "                                              ",
  "                                ",
  "                              ",
  "                                                      ",
  "                                                                    ",
  "                                                                 ",
  "                                                                           ",
  "                                                                   ",
  "                                                 ",
  "                                              ",
  "             ",
  "                                    ",
  "                                                      ",
  "                                                                    ",
  "                                                                 ",
  "                                                                           ",
  "                                                                   ",
  "                                                      ",
  "                                                      ",
  "",
  "                                ",
  "                                            ",
  "                                ",
  "                               ",
  "                            ",
  "                                                                ",
  "                               ",
  "                                  ",
  "                                                                  ",
  "                                        ",
  "                                                    ",
  "                              ",
  "                      ",
  "                                              ",
  "                                                           ",
  "                                                    ",
  "                      ",
  "                                                ",
  "                                              ",
  "                                                 ",
  "                      ",
  "                                  ",
  "             ",
  "                               ",
  "                            ",
  "",
  "                                 ",
  "                                            ",
  "                                       ",
  "                              ",
  "                             ",
  "                         ",
  "",
  "                                   ",
  "                                              ",
  "                                                     ",
  "                                  ",
  "                              ",
  "",
  "                          ",
  "                          ",
  "                         ",
  "",
  "                     ",
  "                                   ",
  "                                                       ",
  "                          ",
  "",
  "                                        ",
  "                         ",
  "                                                      ",
  "                                               ",
  "",
  "                      ",
  "                               ",
  "",
  "                        ",
  "        ^",
  "SyntaxError: EOF while scanning triple-quoted string literal",
  ""
 ]
}