{
 "PRed":[
  {
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"0.13.0"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/216204321.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"0.14.0"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/216219554.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"0.14.1"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/222744408.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"CompilerRebuild",
    "migrator_version":1,
    "name":"Python 3.7, GCC 7, R 3.5.1, openBLAS 0.3.2"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/226842985.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"1.0.0"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/240166215.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"1.0.1"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/268064118.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"1.1.3"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/284523003.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"1.1.4"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/285675746.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"1.2.0"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/311798814.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"1.2.1"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "bad":{
  "exception":"list index out of range",
  "traceback":[
   "Traceback (most recent call last):",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/auto_tick.xsh\", line 694, in main",
   "    hash_type=attrs.get('hash_type', 'sha256'))",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/auto_tick.xsh\", line 98, in run",
   "    migrate_return = migrator.migrate(recipe_dir, attrs, **kwargs)",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/migrators.xsh\", line 1389, in migrate",
   "    return super().migrate(recipe_dir, attrs)",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/migrators.xsh\", line 201, in migrate",
   "    mini_migrator.migrate(recipe_dir, attrs, **kwargs)",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/migrators.xsh\", line 101, in migrate",
   "    md = render(recipe_dir, config=Config(**CB_CONFIG))[0][0]",
   "IndexError: list index out of range",
   ""
  ]
 },
 "conda-forge.yml":{
  "compiler_stack":"comp7",
  "max_py_ver":"37",
  "max_r_ver":"35",
  "provider":{
   "win":"azure"
  }
 },
 "feedstock_name":"anypytools",
 "hash_type":"sha256",
 "meta_yaml":{
  "about":{
   "description":"AnyPyTools is a toolkit for working with the AnyBody Modeling System (AMS)\nfrom Python. Its main purpose is to launch AnyBody simulations and collect\nresults. It has a scheduler to launch multiple instances of AMS utilising\ncomputers with multiple cores. AnyPyTools makes it possible to run parameter\nand Monte Carlo studies more efficiently than from within the AnyBody Modeling\nSystem.\n",
   "dev_url":"https://github.com/AnyBody-Research-Group/AnyPyTools",
   "doc_url":"https://anybody-research-group.github.io/anypytools-docs",
   "home":"https://github.com/AnyBody-Research-Group/AnyPyTools",
   "license":"MIT",
   "summary":"Python tools and utilities for working with the AnyBody Modeling System"
  },
  "app":{
   "entry":"AnyPyToolsTutorial.bat",
   "icon":"apt_icon.png",
   "summary":"Python tools and utilities for working with the AnyBody Modeling System",
   "type":"web"
  },
  "build":{
   "number":"0",
   "preserve_egg_dir":true,
   "skip":true
  },
  "extra":{
   "recipe-maintainers":[
    "melund",
    "melund",
    "melund"
   ]
  },
  "package":{
   "name":"anypytools",
   "version":"1.2.2"
  },
  "requirements":{
   "build":[
    "setuptools",
    "python",
    "setuptools",
    "python",
    "setuptools",
    "python"
   ],
   "run":[
    "python",
    "h5py >=2.5",
    "setuptools",
    "pydoe",
    "scipy >=0.15",
    "pygments_anyscript",
    "python",
    "h5py >=2.5",
    "setuptools",
    "pydoe",
    "scipy >=0.15",
    "pygments_anyscript",
    "python",
    "h5py >=2.5",
    "setuptools",
    "pydoe",
    "scipy >=0.15",
    "pygments_anyscript"
   ]
  },
  "source":{
   "fn":"1.2.2.tar.gz",
   "sha256":"56969efd377f2d8cf5c5aa3354eab47a6ecdd78d1d8945f84b1a734a0a777695",
   "url":"https://github.com/AnyBody-Research-Group/AnyPyTools/archive/1.2.2.tar.gz"
  },
  "test":{
   "imports":[
    "anypytools",
    "anypytools",
    "anypytools"
   ]
  }
 },
 "name":"anypytools",
 "new_version":"1.2.2",
 "pinning_version":"2019.08.22",
 "raw_meta_yaml":"{% set version = \"1.2.2\" %}\n{% set sha256 = \"56969efd377f2d8cf5c5aa3354eab47a6ecdd78d1d8945f84b1a734a0a777695\" %}\n\n\npackage:\n  name: anypytools\n  version: {{ version }}\n\nsource:\n   fn: {{ version }}.tar.gz\n   url: https://github.com/AnyBody-Research-Group/AnyPyTools/archive/{{ version }}.tar.gz\n   sha256: {{ sha256 }}\n\nbuild:          \n  number: 0\n  # Added to allow the pytest entry points in setup.py to work\n  # This is also the reason for setuptools being a runtime dependency. \n  preserve_egg_dir: True\n  skip: True  # [py2k or not win]\n\nrequirements:\n  build:\n    - setuptools\n    - python\n\n  run:\n    - python\n    - h5py >=2.5\n    - setuptools\n    - pydoe\n    - scipy >=0.15\n    - pygments_anyscript\n\ntest:\n    imports:\n       - anypytools\n\napp:\n    entry: AnyPyToolsTutorial.bat\n    summary: Python tools and utilities for working with the AnyBody Modeling System\n    icon: apt_icon.png\n    type: web\n\nabout:\n  home: https://github.com/AnyBody-Research-Group/AnyPyTools\n  license: MIT\n  summary: Python tools and utilities for working with the AnyBody Modeling System\n  description: |\n    AnyPyTools is a toolkit for working with the AnyBody Modeling System (AMS) \n    from Python. Its main purpose is to launch AnyBody simulations and collect \n    results. It has a scheduler to launch multiple instances of AMS utilising \n    computers with multiple cores. AnyPyTools makes it possible to run parameter \n    and Monte Carlo studies more efficiently than from within the AnyBody Modeling \n    System.\n  dev_url: https://github.com/AnyBody-Research-Group/AnyPyTools\n  doc_url: https://anybody-research-group.github.io/anypytools-docs\n\nextra:\n  recipe-maintainers:\n    - melund\n",
 "req":{
  "__set__":true,
  "elements":[
   "h5py",
   "pydoe",
   "pygments_anyscript",
   "python",
   "scipy",
   "setuptools"
  ]
 },
 "smithy_version":"3.4.1",
 "url":"https://github.com/AnyBody-Research-Group/AnyPyTools/archive/1.2.1.tar.gz",
 "version":"1.2.2"
}