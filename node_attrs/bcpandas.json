{
 "PRed":[
  {
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"0.1.7"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/335982292.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"0.2.0"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/341839068.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"0.2.2"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "bad":{
  "exception":"<class 'requests.exceptions.ReadTimeout'>: A connection-level exception occurred: HTTPSConnectionPool(host='api.github.com', port=443): Read timed out. (read timeout=10)",
  "traceback":[
   "Traceback (most recent call last):",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/site-packages/urllib3/connectionpool.py\", line 421, in _make_request",
   "    six.raise_from(e, None)",
   "  File \"<string>\", line 3, in raise_from",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/site-packages/urllib3/connectionpool.py\", line 416, in _make_request",
   "    httplib_response = conn.getresponse()",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/http/client.py\", line 1322, in getresponse",
   "    response.begin()",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/http/client.py\", line 303, in begin",
   "    version, status, reason = self._read_status()",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/http/client.py\", line 264, in _read_status",
   "    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/socket.py\", line 669, in readinto",
   "    return self._sock.recv_into(b)",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/site-packages/urllib3/contrib/pyopenssl.py\", line 326, in recv_into",
   "    raise timeout(\"The read operation timed out\")",
   "socket.timeout: The read operation timed out",
   "",
   "During handling of the above exception, another exception occurred:",
   "",
   "Traceback (most recent call last):",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/site-packages/requests/adapters.py\", line 439, in send",
   "    resp = conn.urlopen(",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/site-packages/urllib3/connectionpool.py\", line 719, in urlopen",
   "    retries = retries.increment(",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/site-packages/urllib3/util/retry.py\", line 400, in increment",
   "    raise six.reraise(type(error), error, _stacktrace)",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/site-packages/urllib3/packages/six.py\", line 735, in reraise",
   "    raise value",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/site-packages/urllib3/connectionpool.py\", line 665, in urlopen",
   "    httplib_response = self._make_request(",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/site-packages/urllib3/connectionpool.py\", line 423, in _make_request",
   "    self._raise_timeout(err=e, url=url, timeout_value=read_timeout)",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/site-packages/urllib3/connectionpool.py\", line 330, in _raise_timeout",
   "    raise ReadTimeoutError(",
   "urllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool(host='api.github.com', port=443): Read timed out. (read timeout=10)",
   "",
   "During handling of the above exception, another exception occurred:",
   "",
   "Traceback (most recent call last):",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/site-packages/github3/models.py\", line 196, in _request",
   "    return request_method(*args, **kwargs)",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/site-packages/requests/sessions.py\", line 546, in get",
   "    return self.request('GET', url, **kwargs)",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/site-packages/github3/session.py\", line 169, in request",
   "    response = super(GitHubSession, self).request(*args, **kwargs)",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/site-packages/requests/sessions.py\", line 533, in request",
   "    resp = self.send(prep, **send_kwargs)",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/site-packages/requests/sessions.py\", line 646, in send",
   "    r = adapter.send(request, **kwargs)",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/site-packages/requests/adapters.py\", line 529, in send",
   "    raise ReadTimeout(e, request=request)",
   "requests.exceptions.ReadTimeout: HTTPSConnectionPool(host='api.github.com', port=443): Read timed out. (read timeout=10)",
   "",
   "During handling of the above exception, another exception occurred:",
   "",
   "Traceback (most recent call last):",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/auto_tick.py\", line 647, in main",
   "    or mctx.gh.rate_limit()[\"resources\"][\"core\"][\"remaining\"] == 0",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/site-packages/github3/github.py\", line 1867, in rate_limit",
   "    return self._json(self._get(url), 200)",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/site-packages/github3/models.py\", line 211, in _get",
   "    return self._request(\"get\", url, **kwargs)",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/site-packages/github3/models.py\", line 201, in _request",
   "    raise exceptions.ConnectionError(exc)",
   "github3.exceptions.ConnectionError: <class 'requests.exceptions.ReadTimeout'>: A connection-level exception occurred: HTTPSConnectionPool(host='api.github.com', port=443): Read timed out. (read timeout=10)",
   ""
  ]
 },
 "conda-forge.yml":{},
 "feedstock_name":"bcpandas",
 "hash_type":"sha256",
 "meta_yaml":{
  "about":{
   "description":"High-level wrapper around BCP for high performance data transfers between pandas and SQL Server.\nNo knowledge of BCP required!!\n",
   "dev_url":"https://github.com/yehoshuadimarsky/bcpandas",
   "doc_url":"https://github.com/yehoshuadimarsky/bcpandas",
   "home":"https://pypi.org/project/bcpandas",
   "license":"MIT",
   "license_family":"MIT",
   "license_file":"LICENSE",
   "summary":"Wrapper around BCP to transfer data between pandas and SQL Server."
  },
  "build":{
   "noarch":"python",
   "number":"0",
   "script":" -m pip install . -vv"
  },
  "extra":{
   "recipe-maintainers":[
    "yehoshuadimarsky",
    "yehoshuadimarsky",
    "yehoshuadimarsky"
   ]
  },
  "package":{
   "name":"bcpandas",
   "version":"0.2.3"
  },
  "requirements":{
   "host":[
    "python >=3.6, <3.8",
    "pip",
    "setuptools",
    "python >=3.6, <3.8",
    "pip",
    "setuptools",
    "python >=3.6, <3.8",
    "pip",
    "setuptools"
   ],
   "run":[
    "python >=3.6, <3.8",
    "pandas >=0.19",
    "pyodbc",
    "sqlalchemy >=1.1.4",
    "python >=3.6, <3.8",
    "pandas >=0.19",
    "pyodbc",
    "sqlalchemy >=1.1.4",
    "python >=3.6, <3.8",
    "pandas >=0.19",
    "pyodbc",
    "sqlalchemy >=1.1.4"
   ]
  },
  "source":{
   "sha256":"fc959a184979d6219b06fdaf8e610903292db13f1afa28a7899fc8412cb1f422",
   "url":"https://pypi.io/packages/source/b/bcpandas/bcpandas-0.2.3.tar.gz"
  },
  "test":{
   "imports":[
    "bcpandas",
    "bcpandas",
    "bcpandas"
   ]
  }
 },
 "name":"bcpandas",
 "new_version":"0.2.5",
 "pinning_version":"2019.11.14",
 "raw_meta_yaml":"{% set name = \"bcpandas\" %}\n{% set version = \"0.2.3\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: fc959a184979d6219b06fdaf8e610903292db13f1afa28a7899fc8412cb1f422\n\nbuild:\n  noarch: python\n  number: 0\n  script: \"{{ PYTHON }} -m pip install . -vv\"\n\nrequirements:\n  host:\n    - python >=3.6, <3.8\n    - pip\n    - setuptools\n  \n  run: \n    - python >=3.6, <3.8\n    - pandas >=0.19 \n    - pyodbc \n    - sqlalchemy >=1.1.4 \n  \ntest:\n  imports:\n    - bcpandas\n\nabout:\n  home: https://pypi.org/project/bcpandas\n  license: MIT\n  license_family: MIT\n  license_file: LICENSE\n  summary: Wrapper around BCP to transfer data between pandas and SQL Server.\n  description: |\n    High-level wrapper around BCP for high performance data transfers between pandas and SQL Server. \n    No knowledge of BCP required!!\n  doc_url: https://github.com/yehoshuadimarsky/bcpandas\n  dev_url: https://github.com/yehoshuadimarsky/bcpandas\n\nextra:\n  recipe-maintainers:\n    - yehoshuadimarsky\n",
 "req":{
  "__set__":true,
  "elements":[
   "pandas",
   "pip",
   "pyodbc",
   "python",
   "setuptools",
   "sqlalchemy"
  ]
 },
 "smithy_version":"3.6.2",
 "url":"https://github.com/yehoshuadimarsky/bcpandas/archive/0.1.8.tar.gz",
 "version":"0.2.3"
}