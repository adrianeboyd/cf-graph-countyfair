{
 "bad":{
  "code":404,
  "exception":"HTTP Error 404: Not Found",
  "traceback":[
   "Traceback (most recent call last):",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/auto_tick.xsh\", line 750, in main",
   "    dry_run=args.dry_run)",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/auto_tick.xsh\", line 98, in run",
   "    migrate_return = migrator.migrate(recipe_dir, attrs, **kwargs)",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/migrators.xsh\", line 467, in migrate",
   "    new_patterns = self.get_hash_patterns('meta.yaml', urls, hash_type)",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/migrators.xsh\", line 384, in get_hash_patterns",
   "    hash = hash_url(url, hash_type)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/rever/tools.xsh\", line 207, in hash_url",
   "    for b in stream_url_progress(url, verb='Hashing', quiet=quiet):",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/rever/tools.xsh\", line 179, in stream_url_progress",
   "    with urllib.request.urlopen(url) as f:",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 222, in urlopen",
   "    return opener.open(url, data, timeout)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 531, in open",
   "    response = meth(req, response)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 641, in http_response",
   "    'http', request, response, code, msg, hdrs)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 563, in error",
   "    result = self._call_chain(*args)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 503, in _call_chain",
   "    result = func(*args)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 755, in http_error_302",
   "    return self.parent.open(new, timeout=req.timeout)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 531, in open",
   "    response = meth(req, response)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 641, in http_response",
   "    'http', request, response, code, msg, hdrs)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 569, in error",
   "    return self._call_chain(*args)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 503, in _call_chain",
   "    result = func(*args)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 649, in http_error_default",
   "    raise HTTPError(req.full_url, code, msg, hdrs, fp)",
   "urllib.error.HTTPError: HTTP Error 404: Not Found",
   ""
  ],
  "url":"https://codeload.github.com/bird-house/birdy/zip/0.6.5"
 },
 "conda-forge.yml":{},
 "feedstock_name":"birdy",
 "hash_type":"sha256",
 "meta_yaml":{
  "about":{
   "description":"Birdy is a Python command-line tool to work with Web Processing Services (WPS).\nIt is built with the capabilities of OWSLib from the GeoPython project and allows\nfor ease in the development of WPS-enabled services as part of the Bird-house ecosystem.\n",
   "dev_url":"http://github.com/bird-house/birdy",
   "doc_url":"https://birdy.readthedocs.io/en/stable/",
   "home":"http://github.com/bird-house/birdy",
   "license":"Apache-2.0",
   "license_family":"Apache",
   "license_file":"LICENSE.txt",
   "summary":"Birdy provides a command-line tool to work with Web Processing Services (WPS)."
  },
  "build":{
   "entry_points":[
    "birdy = birdy.cli.run:cli",
    "birdy = birdy.cli.run:cli",
    "birdy = birdy.cli.run:cli"
   ],
   "noarch":"python",
   "number":"0",
   "script":" -m pip install . -vv"
  },
  "extra":{
   "recipe-maintainers":[
    "cehbrecht",
    "Zeitsperre",
    "cehbrecht",
    "Zeitsperre",
    "cehbrecht",
    "Zeitsperre"
   ]
  },
  "package":{
   "name":"birdy",
   "version":"v0.6.5"
  },
  "requirements":{
   "host":[
    "python >=3",
    "pip",
    "setuptools",
    "six",
    "click",
    "lxml",
    "owslib >=0.18.0",
    "jinja2",
    "wrapt",
    "funcsigs",
    "boltons",
    "python >=3",
    "pip",
    "setuptools",
    "six",
    "click",
    "lxml",
    "owslib >=0.18.0",
    "jinja2",
    "wrapt",
    "funcsigs",
    "boltons",
    "python >=3",
    "pip",
    "setuptools",
    "six",
    "click",
    "lxml",
    "owslib >=0.18.0",
    "jinja2",
    "wrapt",
    "funcsigs",
    "boltons"
   ],
   "run":[
    "python >=3",
    "six",
    "click",
    "lxml",
    "owslib >=0.18.0",
    "jinja2",
    "wrapt",
    "funcsigs",
    "boltons",
    "python >=3",
    "six",
    "click",
    "lxml",
    "owslib >=0.18.0",
    "jinja2",
    "wrapt",
    "funcsigs",
    "boltons",
    "python >=3",
    "six",
    "click",
    "lxml",
    "owslib >=0.18.0",
    "jinja2",
    "wrapt",
    "funcsigs",
    "boltons"
   ]
  },
  "source":{
   "sha256":"ece0aa45130b874ec623b763027e1ee5da125fdbf83a30cdb622ed1d9facd1be",
   "url":"https://github.com/bird-house/birdy/archive/v0.6.5.tar.gz"
  },
  "test":{
   "imports":[
    "birdy",
    "birdy",
    "birdy"
   ]
  }
 },
 "name":"birdy",
 "new_version":"0.6.5",
 "raw_meta_yaml":"{% set name = \"birdy\" %}\n{% set version = \"v0.6.5\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/bird-house/{{ name }}/archive/{{ version }}.tar.gz\n  sha256: ece0aa45130b874ec623b763027e1ee5da125fdbf83a30cdb622ed1d9facd1be\n\nbuild:\n  noarch: python\n  number: 0\n  script: \"{{ PYTHON }} -m pip install . -vv\"\n  entry_points:\n    - birdy = birdy.cli.run:cli\n\nrequirements:\n  host:\n    - python >=3\n    - pip\n    - setuptools\n    - six\n    - click\n    - lxml\n    - owslib >=0.18.0\n    - jinja2\n    - wrapt\n    - funcsigs\n    - boltons\n  run:\n    - python >=3\n    - six\n    - click\n    - lxml\n    - owslib >=0.18.0\n    - jinja2\n    - wrapt\n    - funcsigs\n    - boltons\n\ntest:\n  imports:\n    - birdy\n\nabout:\n  home: http://github.com/bird-house/birdy\n  license: Apache-2.0\n  license_family: Apache\n  license_file: LICENSE.txt\n  summary: 'Birdy provides a command-line tool to work with Web Processing Services (WPS).'\n\n  description: |\n    Birdy is a Python command-line tool to work with Web Processing Services (WPS).\n    It is built with the capabilities of OWSLib from the GeoPython project and allows\n    for ease in the development of WPS-enabled services as part of the Bird-house ecosystem.\n  doc_url: https://birdy.readthedocs.io/en/stable/\n  dev_url: http://github.com/bird-house/birdy\n\nextra:\n  recipe-maintainers:\n    - cehbrecht\n    - Zeitsperre\n",
 "req":{
  "__set__":true,
  "elements":[
   "boltons",
   "click",
   "funcsigs",
   "jinja2",
   "lxml",
   "owslib",
   "pip",
   "python",
   "setuptools",
   "six",
   "wrapt"
  ]
 },
 "time":1568135309.980156,
 "url":"https://github.com/bird-house/birdy/archive/v0.6.5.tar.gz",
 "version":"v0.6.5"
}