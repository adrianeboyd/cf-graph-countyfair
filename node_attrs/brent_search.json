{
 "PRed":[
  {
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"1.0.32"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/200416941.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Noarch",
    "migrator_version":0
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version"
   ]
  }
 ],
 "bad":{
  "code":404,
  "exception":"HTTP Error 404: Not Found",
  "traceback":[
   "Traceback (most recent call last):",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/auto_tick.xsh\", line 579, in main",
   "    hash_type=attrs.get('hash_type', 'sha256'))",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/auto_tick.xsh\", line 97, in run",
   "    migrate_return = migrator.migrate(recipe_dir, attrs, **kwargs)",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/migrators.xsh\", line 334, in migrate",
   "    new_patterns = self.get_hash_patterns('meta.yaml', urls, hash_type)",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/migrators.xsh\", line 264, in get_hash_patterns",
   "    hash = hash_url(url, hash_type)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/rever/tools.xsh\", line 207, in hash_url",
   "    for b in stream_url_progress(url, verb='Hashing', quiet=quiet):",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/rever/tools.xsh\", line 179, in stream_url_progress",
   "    with urllib.request.urlopen(url) as f:",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 222, in urlopen",
   "    return opener.open(url, data, timeout)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 531, in open",
   "    response = meth(req, response)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 641, in http_response",
   "    'http', request, response, code, msg, hdrs)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 563, in error",
   "    result = self._call_chain(*args)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 503, in _call_chain",
   "    result = func(*args)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 755, in http_error_302",
   "    return self.parent.open(new, timeout=req.timeout)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 531, in open",
   "    response = meth(req, response)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 641, in http_response",
   "    'http', request, response, code, msg, hdrs)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 563, in error",
   "    result = self._call_chain(*args)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 503, in _call_chain",
   "    result = func(*args)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 755, in http_error_302",
   "    return self.parent.open(new, timeout=req.timeout)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 531, in open",
   "    response = meth(req, response)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 641, in http_response",
   "    'http', request, response, code, msg, hdrs)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 569, in error",
   "    return self._call_chain(*args)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 503, in _call_chain",
   "    result = func(*args)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 649, in http_error_default",
   "    raise HTTPError(req.full_url, code, msg, hdrs, fp)",
   "urllib.error.HTTPError: HTTP Error 404: Not Found",
   ""
  ],
  "url":"https://files.pythonhosted.org/packages/source/b/brent_search/brent_search-2.0.0.tar.gz"
 },
 "conda-forge.yml":{},
 "feedstock_name":"brent_search",
 "hash_type":"sha256",
 "meta_yaml":{
  "about":{
   "dev_url":"https://github.com/Horta/brent-search",
   "doc_url":"https://github.com/Horta/brent-search",
   "home":"https://github.com/Horta/brent-search",
   "license":"MIT",
   "license_family":"MIT",
   "license_file":"LICENSE",
   "summary":"Brent's method for univariate function optimization."
  },
  "build":{
   "noarch":"python",
   "number":"1",
   "script":"python -m pip install --no-deps --ignore-installed ."
  },
  "extra":{
   "recipe-maintainers":[
    "Horta",
    "Horta",
    "Horta"
   ]
  },
  "package":{
   "name":"brent_search",
   "version":"1.0.15"
  },
  "requirements":{
   "host":[
    "pip",
    "python",
    "setuptools",
    "pytest-runner",
    "pip",
    "python",
    "setuptools",
    "pytest-runner",
    "pip",
    "python",
    "setuptools",
    "pytest-runner"
   ],
   "run":[
    "python",
    "python",
    "python"
   ]
  },
  "source":{
   "fn":"brent_search-1.0.15.tar.gz",
   "sha256":"07e0e7c818a698540b2cd1d5a52ed80d0b6ee9dcbf42629215598b5e7a235adb",
   "url":"https://pypi.io/packages/source/b/brent_search/brent_search-1.0.15.tar.gz"
  },
  "test":{
   "commands":[
    "python -c \"import brent_search; brent_search.test()\"",
    "python -c \"import brent_search; brent_search.test()\"",
    "python -c \"import brent_search; brent_search.test()\""
   ],
   "imports":[
    "brent_search",
    "brent_search",
    "brent_search"
   ],
   "requires":[
    "pytest",
    "pytest",
    "pytest"
   ]
  }
 },
 "name":"brent_search",
 "new_version":"2.0.0",
 "pinning_version":"2018.07.01",
 "raw_meta_yaml":"{% set name = \"brent_search\" %}\n{% set version = \"1.0.15\" %}\n{% set sha256 = \"07e0e7c818a698540b2cd1d5a52ed80d0b6ee9dcbf42629215598b5e7a235adb\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  fn: {{ name }}-{{ version }}.tar.gz\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: {{ sha256 }}\n\nbuild:\n  noarch: python\n  number: 1\n  script: python -m pip install --no-deps --ignore-installed .\n\nrequirements:\n  host:\n    - pip\n    - python\n    - setuptools\n    - pytest-runner\n  run:\n    - python\n\ntest:\n  requires:\n    - pytest\n  imports:\n    - brent_search\n  commands:\n    - python -c \"import brent_search; brent_search.test()\"\n\nabout:\n  home: https://github.com/Horta/brent-search\n  license: MIT\n  license_family: MIT\n  license_file: LICENSE\n  summary: \"Brent's method for univariate function optimization.\"\n  doc_url: https://github.com/Horta/brent-search\n  dev_url: https://github.com/Horta/brent-search\n\nextra:\n  recipe-maintainers:\n    - Horta\n",
 "req":{
  "__set__":true,
  "elements":[
   "pip",
   "pytest-runner",
   "python",
   "setuptools"
  ]
 },
 "smithy_version":"3.1.6",
 "time":1568120904.6660058,
 "url":"https://pypi.io/packages/source/b/brent_search/brent_search-1.0.15.tar.gz",
 "version":"1.0.15"
}