{
 "PRed":[
  {
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"1.2.8"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/222719122.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"1.3.0"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/274179772.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"2.0.0"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "bad":false,
 "conda-forge.yml":{},
 "feedstock_name":"category_encoders",
 "hash_type":"sha256",
 "meta_yaml":{
  "about":{
   "description":"A set of scikit-learn-style transformers for encoding categorical variables\ninto numeric with different techniques. While ordinal, one-hot, and hashing\nencoders have similar equivalents in the existing scikit-learn version, the\ntransformers in this library all share a few useful properties:\n\n- First-class support for pandas dataframes as an input (and optionally as\n  output)\n\n- Can explicitly configure which columns in the data are encoded by name or\n  index, or infer non-numeric columns regardless of input type\n\n- Can drop any columns with very low variance based on training set\n  optionally\n\n- Portability: train a transformer on data, pickle it, reuse it later and\n  get the same thing out.\n\n- Full compatibility with sklearn pipelines, input an array-like dataset\n  like any other transformer",
   "doc_url":"https://contrib.scikit-learn.org/categorical-encoding",
   "home":"https://github.com/scikit-learn-contrib/categorical_encoding",
   "license":"BSD-3-Clause",
   "license_family":"BSD",
   "license_file":"LICENSE.md",
   "summary":"A collection sklearn transformers to encode categorical variables as numeric"
  },
  "build":{
   "noarch":"python",
   "number":"1",
   "script":[
    "rd /s /q examples",
    " -m pip install --no-deps --ignore-installed -vvv .",
    "rm -rf examples",
    " -m pip install --no-deps --ignore-installed -vvv .",
    "rm -rf examples",
    " -m pip install --no-deps --ignore-installed -vvv ."
   ]
  },
  "extra":{
   "recipe-maintainers":[
    "bollwyvl",
    "nirajd",
    "wdm0006",
    "bollwyvl",
    "nirajd",
    "wdm0006",
    "bollwyvl",
    "nirajd",
    "wdm0006"
   ]
  },
  "package":{
   "name":"category_encoders",
   "version":"2.0.0"
  },
  "requirements":{
   "host":[
    "python",
    "pip",
    "python",
    "pip",
    "python",
    "pip"
   ],
   "run":[
    "numpy >=1.11.3",
    "pandas >=0.21.1,<0.24",
    "patsy >=0.4.1",
    "python",
    "scikit-learn >=0.20.0",
    "scipy >=0.19.0",
    "statsmodels >=0.6.1",
    "numpy >=1.11.3",
    "pandas >=0.21.1,<0.24",
    "patsy >=0.4.1",
    "python",
    "scikit-learn >=0.20.0",
    "scipy >=0.19.0",
    "statsmodels >=0.6.1",
    "numpy >=1.11.3",
    "pandas >=0.21.1,<0.24",
    "patsy >=0.4.1",
    "python",
    "scikit-learn >=0.20.0",
    "scipy >=0.19.0",
    "statsmodels >=0.6.1"
   ]
  },
  "source":{
   "sha256":"cc2fe178fe6b4dc6fbf4de6b9070151889255f6d1306ffc22e8de79e20c0c047",
   "url":"https://pypi.io/packages/source/c/category_encoders/category_encoders-2.0.0.tar.gz"
  },
  "test":{
   "commands":[
    "nosetests category_encoders",
    "nosetests category_encoders",
    "nosetests category_encoders"
   ],
   "imports":[
    "category_encoders",
    "category_encoders",
    "category_encoders"
   ],
   "requires":[
    "nose",
    "python",
    "unittest2",
    "cython",
    "nose",
    "python",
    "unittest2",
    "cython",
    "nose",
    "python",
    "unittest2",
    "cython"
   ]
  }
 },
 "name":"category_encoders",
 "new_version":"2.0.0",
 "pinning_version":"2019.04.25",
 "raw_meta_yaml":"{% set name = \"category_encoders\" %}\n{% set version = \"2.0.0\" %}\n\npackage:\n  name: {{ name }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: cc2fe178fe6b4dc6fbf4de6b9070151889255f6d1306ffc22e8de79e20c0c047\n\nbuild:\n  noarch: python\n  number: 1\n  script:\n    - rm -rf examples  # [unix]\n    - rd /s /q examples  # [win]\n    - \"{{ PYTHON }} -m pip install --no-deps --ignore-installed -vvv .\"\n\nrequirements:\n  host:\n    - python\n    - pip\n  run:\n    - numpy >=1.11.3\n    - pandas >=0.21.1,<0.24\n    - patsy >=0.4.1\n    - python\n    - scikit-learn >=0.20.0\n    - scipy >=0.19.0\n    - statsmodels >=0.6.1\n\ntest:\n  requires:\n    - nose\n    - python\n    - unittest2\n    - cython\n  imports:\n    - category_encoders\n  commands:\n    - nosetests category_encoders\n\nabout:\n  home: https://github.com/scikit-learn-contrib/categorical_encoding\n  license: BSD-3-Clause\n  license_family: BSD\n  license_file: LICENSE.md\n  summary: A collection sklearn transformers to encode categorical variables as numeric\n  doc_url: https://contrib.scikit-learn.org/categorical-encoding\n  description: |-\n    A set of scikit-learn-style transformers for encoding categorical variables\n    into numeric with different techniques. While ordinal, one-hot, and hashing\n    encoders have similar equivalents in the existing scikit-learn version, the\n    transformers in this library all share a few useful properties:\n\n    - First-class support for pandas dataframes as an input (and optionally as\n      output)\n\n    - Can explicitly configure which columns in the data are encoded by name or\n      index, or infer non-numeric columns regardless of input type\n\n    - Can drop any columns with very low variance based on training set\n      optionally\n\n    - Portability: train a transformer on data, pickle it, reuse it later and\n      get the same thing out.\n\n    - Full compatibility with sklearn pipelines, input an array-like dataset\n      like any other transformer\n\nextra:\n  recipe-maintainers:\n    - bollwyvl\n    - nirajd\n    - wdm0006\n",
 "req":{
  "__set__":true,
  "elements":[
   "numpy",
   "pandas",
   "patsy",
   "pip",
   "python",
   "scikit-learn",
   "scipy",
   "statsmodels"
  ]
 },
 "smithy_version":"3.3.4",
 "time":1568072004.6679933,
 "url":"https://pypi.io/packages/source/c/category_encoders/category_encoders-2.0.0.tar.gz",
 "version":"2.0.0"
}