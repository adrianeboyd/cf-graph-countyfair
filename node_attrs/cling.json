{
 "PRed":[
  {
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"0.5"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "data":{
    "bot_rerun":false,
    "migrator_name":"Compiler",
    "migrator_version":0
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/228104423.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"CompilerRebuild",
    "migrator_version":1,
    "name":"Python 3.7, GCC 7, R 3.5.1, openBLAS 0.3.2"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/308024389.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"0.6"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "bad":false,
 "conda-forge.yml":{
  "compiler_stack":"comp7",
  "max_py_ver":"37",
  "max_r_ver":"35"
 },
 "feedstock_name":"cling",
 "hash_type":"sha256",
 "meta_yaml":{
  "about":{
   "description":"Cling is an interactive C++ interpreter, built on top of Clang and LLVM compiler infrastructure. Cling realizes the read-eval-print loop (REPL) concept, in order to leverage rapid application development. Implemented as a small extension to LLVM and Clang, the interpreter reuses their strengths such as the praised concise and expressive compiler diagnostics.",
   "dev_url":"https://github.com/root-mirror/cling",
   "doc_url":"https://root.cern.ch/cling",
   "home":"https://root.cern.ch/cling",
   "license":"UI/NCSAOSL",
   "license_family":"BSD",
   "license_file":"LICENSE.TXT",
   "summary":"Cling - The Interactive C++ Interpreter"
  },
  "build":{
   "number":1007,
   "run_exports":[
    "subpackage_stub",
    "subpackage_stub",
    "subpackage_stub"
   ],
   "skip":true
  },
  "extra":{
   "recipe-maintainers":[
    "SylvainCorlay",
    "JohanMabille",
    "gouarin",
    "chrisburr",
    "SylvainCorlay",
    "JohanMabille",
    "gouarin",
    "chrisburr",
    "SylvainCorlay",
    "JohanMabille",
    "gouarin",
    "chrisburr"
   ]
  },
  "package":{
   "name":"cling",
   "version":"0.5"
  },
  "requirements":{
   "build":[
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "cxx_compiler_stub",
    "cmake",
    "cxx_compiler_stub"
   ],
   "host":[
    "llvmdev=5",
    "clangdev=5.0.0",
    "clang_variant * cling_6.14.06",
    "zlib",
    "llvmdev=5",
    "clangdev=5.0.0",
    "clang_variant * cling_6.14.06",
    "zlib",
    "compatible_pin_stub",
    "llvmdev=5",
    "clangdev=5.0.0",
    "clang_variant * cling_6.14.06",
    "zlib"
   ],
   "run":[
    "clangdev=5.0.0",
    "clang_variant * cling_6.14.06",
    "compatible_pin_stub",
    "clangdev=5.0.0",
    "clang_variant * cling_6.14.06",
    "cxx_compiler_stub",
    "clangdev=5.0.0",
    "clang_variant * cling_6.14.06"
   ]
  },
  "source":{
   "fn":"cling-0.5.tar.gz",
   "patches":[
    "patches/0001-remove-jupyter.patch",
    "patches/0001-fix-STATIC-lincling.patch",
    "patches/0002-BBVectorize-flag-was-unused-and-went-away-in-LLVM-5..patch",
    "patches/0003-file_magic-went-into-its-own-header-file.patch",
    "patches/0004-Follow-recent-changes-in-the-OptTable.patch",
    "patches/0005-Use-the-setter.patch",
    "patches/0006-Do-not-prevent-copy-elision.patch",
    "patches/0007-Follow-recent-LLVM-changes.patch",
    "patches/0008-Make-this-code-path-unreachable.patch",
    "patches/0009-The-annotation-token-became-a-special-one.patch",
    "patches/0010-Bump-the-last-known-good-llvm-revision-to-point-to-r.patch",
    "patches/0011-Do-not-forget-to-return-from-the-function.patch",
    "patches/0012-Return-0-if-we-cannot-find-an-address.patch",
    "patches/0013-LLVM-5.0-comes-with-special-library-lookup-ordering-.patch",
    "patches/0014-Rely-on-Azog-to-allocate-the-memory-in-an-exception-.patch",
    "patches/0015-Spelling.patch",
    "patches/0016-Switch-back-to-O0.patch",
    "patches/0017-Use-g-instead-of-f-to-preserve-precision.patch",
    "patches/0018-Fix-thread-local-storage-in-the-cling-JIT.patch",
    "patches/0019-Fix-formatting-of-the-TLS-commit.patch",
    "patches/0020-Multiplex-the-ExternalASTSource-in-cling.patch",
    "patches/0021-Adapt-to-format-changes-in-floating-point-value-prin.patch",
    "patches/0022-Adapt-to-new-default-opt-level.patch",
    "patches/0023-Work-around-an-issue-being-resolved-in-PR1306.patch",
    "patches/0024-Fix-typo-we-want-to-suppress-diag-not-enable-it.patch",
    "patches/0025-Address-ROOT-9114-Issues-with-dictionary-s-enum-forw.patch",
    "patches/0026-Disable-module-file-validation.patch",
    "patches/0027-conda-packaging.patch",
    "patches/0001-Use-a-stable-way-to-determine-the-address-of-printed.patch",
    "patches/0001-ast-fix.patch",
    "patches/0001-remove-jupyter.patch",
    "patches/0001-fix-STATIC-lincling.patch",
    "patches/0002-BBVectorize-flag-was-unused-and-went-away-in-LLVM-5..patch",
    "patches/0003-file_magic-went-into-its-own-header-file.patch",
    "patches/0004-Follow-recent-changes-in-the-OptTable.patch",
    "patches/0005-Use-the-setter.patch",
    "patches/0006-Do-not-prevent-copy-elision.patch",
    "patches/0007-Follow-recent-LLVM-changes.patch",
    "patches/0008-Make-this-code-path-unreachable.patch",
    "patches/0009-The-annotation-token-became-a-special-one.patch",
    "patches/0010-Bump-the-last-known-good-llvm-revision-to-point-to-r.patch",
    "patches/0011-Do-not-forget-to-return-from-the-function.patch",
    "patches/0012-Return-0-if-we-cannot-find-an-address.patch",
    "patches/0013-LLVM-5.0-comes-with-special-library-lookup-ordering-.patch",
    "patches/0014-Rely-on-Azog-to-allocate-the-memory-in-an-exception-.patch",
    "patches/0015-Spelling.patch",
    "patches/0016-Switch-back-to-O0.patch",
    "patches/0017-Use-g-instead-of-f-to-preserve-precision.patch",
    "patches/0018-Fix-thread-local-storage-in-the-cling-JIT.patch",
    "patches/0019-Fix-formatting-of-the-TLS-commit.patch",
    "patches/0020-Multiplex-the-ExternalASTSource-in-cling.patch",
    "patches/0021-Adapt-to-format-changes-in-floating-point-value-prin.patch",
    "patches/0022-Adapt-to-new-default-opt-level.patch",
    "patches/0023-Work-around-an-issue-being-resolved-in-PR1306.patch",
    "patches/0024-Fix-typo-we-want-to-suppress-diag-not-enable-it.patch",
    "patches/0025-Address-ROOT-9114-Issues-with-dictionary-s-enum-forw.patch",
    "patches/0026-Disable-module-file-validation.patch",
    "patches/0027-conda-packaging.patch",
    "patches/0001-Use-a-stable-way-to-determine-the-address-of-printed.patch",
    "patches/0001-ast-fix.patch",
    "patches/0001-remove-jupyter.patch",
    "patches/0001-fix-STATIC-lincling.patch",
    "patches/0002-BBVectorize-flag-was-unused-and-went-away-in-LLVM-5..patch",
    "patches/0003-file_magic-went-into-its-own-header-file.patch",
    "patches/0004-Follow-recent-changes-in-the-OptTable.patch",
    "patches/0005-Use-the-setter.patch",
    "patches/0006-Do-not-prevent-copy-elision.patch",
    "patches/0007-Follow-recent-LLVM-changes.patch",
    "patches/0008-Make-this-code-path-unreachable.patch",
    "patches/0009-The-annotation-token-became-a-special-one.patch",
    "patches/0010-Bump-the-last-known-good-llvm-revision-to-point-to-r.patch",
    "patches/0011-Do-not-forget-to-return-from-the-function.patch",
    "patches/0012-Return-0-if-we-cannot-find-an-address.patch",
    "patches/0013-LLVM-5.0-comes-with-special-library-lookup-ordering-.patch",
    "patches/0014-Rely-on-Azog-to-allocate-the-memory-in-an-exception-.patch",
    "patches/0015-Spelling.patch",
    "patches/0016-Switch-back-to-O0.patch",
    "patches/0017-Use-g-instead-of-f-to-preserve-precision.patch",
    "patches/0018-Fix-thread-local-storage-in-the-cling-JIT.patch",
    "patches/0019-Fix-formatting-of-the-TLS-commit.patch",
    "patches/0020-Multiplex-the-ExternalASTSource-in-cling.patch",
    "patches/0021-Adapt-to-format-changes-in-floating-point-value-prin.patch",
    "patches/0022-Adapt-to-new-default-opt-level.patch",
    "patches/0023-Work-around-an-issue-being-resolved-in-PR1306.patch",
    "patches/0024-Fix-typo-we-want-to-suppress-diag-not-enable-it.patch",
    "patches/0025-Address-ROOT-9114-Issues-with-dictionary-s-enum-forw.patch",
    "patches/0026-Disable-module-file-validation.patch",
    "patches/0027-conda-packaging.patch",
    "patches/0001-Use-a-stable-way-to-determine-the-address-of-printed.patch",
    "patches/0001-ast-fix.patch"
   ],
   "sha256":"ac017e7f48d8f47d5d13815b77f5c555769f3a5e2c3cae8ba5bf4ea34e39923a",
   "url":"https://github.com/root-mirror/cling/archive/v0.5.tar.gz"
  },
  "test":{
   "commands":[
    "cling '2+3; 0'",
    "cling '#include <vector>; std::vector<double> = {0, 2, 5}'",
    "test -f $PREFIX/bin/cling",
    "cling '2+3; 0'",
    "cling '#include <vector>; std::vector<double> = {0, 2, 5}'",
    "test -f $PREFIX/bin/cling",
    "cling '2+3; 0'",
    "cling '#include <vector>; std::vector<double> = {0, 2, 5}'"
   ]
  }
 },
 "name":"cling",
 "new_version":"0.6",
 "pinning_version":"2019.08.11",
 "raw_meta_yaml":"{% set name = \"cling\" %}\n{% set version = \"0.5\" %}\n{% set sha256 = \"ac017e7f48d8f47d5d13815b77f5c555769f3a5e2c3cae8ba5bf4ea34e39923a\" %}\n{% set build_number = 1007 %}\n{% set clang_version = [5, 0, 0] %}\n{% set clang_patches_version = \"6.14.06\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  fn: {{ name }}-{{ version }}.tar.gz\n  url: https://github.com/root-mirror/cling/archive/v{{ version }}.tar.gz\n  sha256: {{ sha256 }}\n  patches:\n    # Do not build Jupyter kernel - use xeus-cling instead\n    - patches/0001-remove-jupyter.patch\n    # Upstream paches\n    - patches/0001-fix-STATIC-lincling.patch\n    - patches/0002-BBVectorize-flag-was-unused-and-went-away-in-LLVM-5..patch\n    - patches/0003-file_magic-went-into-its-own-header-file.patch\n    - patches/0004-Follow-recent-changes-in-the-OptTable.patch\n    - patches/0005-Use-the-setter.patch\n    - patches/0006-Do-not-prevent-copy-elision.patch\n    - patches/0007-Follow-recent-LLVM-changes.patch\n    - patches/0008-Make-this-code-path-unreachable.patch\n    - patches/0009-The-annotation-token-became-a-special-one.patch\n    - patches/0010-Bump-the-last-known-good-llvm-revision-to-point-to-r.patch\n    - patches/0011-Do-not-forget-to-return-from-the-function.patch\n    - patches/0012-Return-0-if-we-cannot-find-an-address.patch\n    - patches/0013-LLVM-5.0-comes-with-special-library-lookup-ordering-.patch\n    - patches/0014-Rely-on-Azog-to-allocate-the-memory-in-an-exception-.patch\n    - patches/0015-Spelling.patch\n    - patches/0016-Switch-back-to-O0.patch\n    - patches/0017-Use-g-instead-of-f-to-preserve-precision.patch\n    - patches/0018-Fix-thread-local-storage-in-the-cling-JIT.patch\n    - patches/0019-Fix-formatting-of-the-TLS-commit.patch\n    - patches/0020-Multiplex-the-ExternalASTSource-in-cling.patch\n    - patches/0021-Adapt-to-format-changes-in-floating-point-value-prin.patch\n    - patches/0022-Adapt-to-new-default-opt-level.patch\n    - patches/0023-Work-around-an-issue-being-resolved-in-PR1306.patch\n    - patches/0024-Fix-typo-we-want-to-suppress-diag-not-enable-it.patch\n    - patches/0025-Address-ROOT-9114-Issues-with-dictionary-s-enum-forw.patch\n    - patches/0026-Disable-module-file-validation.patch\n    - patches/0027-conda-packaging.patch\n    # Solve issue with usage of overload operator& to retrieve addess of object\n    - patches/0001-Use-a-stable-way-to-determine-the-address-of-printed.patch\n    # Resolve issue with string representation of type not including namespace\n    - patches/0001-ast-fix.patch\n\nbuild:\n  number: {{ build_number }}\n  # clangdev 5.0.0 is not rebuilt yet for windows\n  skip: True  # [win]\n  # skip: True  # [win and vc<14]\n  run_exports:\n    - {{ pin_subpackage(name, max_pin='x.x') }}\n\nrequirements:\n  build:\n    - cmake\n    - ninja  # [win]\n    - {{ compiler('cxx') }}\n  host:\n    - llvmdev={{ clang_version[0] }}\n    - clangdev={{ clang_version|join('.') }}\n    - clang_variant * cling_{{ clang_patches_version }}\n    - zlib\n    # Strong run exports from clangxx_osx-64 don't pin libcxx.\n    # Cling does require the same version of libcxx to be used.\n    - {{ pin_compatible('libcxx', exact=True) }}  # [osx]\n  run:\n    # We really depend on the host compiler at runtime:\n    #  - the host compiler STL is one to be used.\n    #  - it is used by cling's runtime compatibility check.\n    - {{ compiler('cxx') }}  # [linux]\n    # Strong run exports from clangxx_osx-64 don't pin libcxx.\n    # Cling does require the same version of libcxx to be used.\n    - {{ pin_compatible('libcxx', exact=True) }}  # [osx]\n    - clangdev={{ clang_version|join('.') }}\n    - clang_variant * cling_{{ clang_patches_version }}\n\ntest:\n  commands:\n    - test -f $PREFIX/bin/cling  # [unix]\n    - cling '2+3; 0'\n    - cling '#include <vector>; std::vector<double> = {0, 2, 5}'\n\nabout:\n  dev_url: https://github.com/root-mirror/cling\n  doc_url: https://root.cern.ch/cling\n  home: https://root.cern.ch/cling\n  license: UI/NCSAOSL\n  license_family: BSD\n  license_file: LICENSE.TXT\n  summary: Cling - The Interactive C++ Interpreter\n  description: Cling is an interactive C++ interpreter, built on top of Clang and\n    LLVM compiler infrastructure. Cling realizes the read-eval-print loop (REPL)\n    concept, in order to leverage rapid application development. Implemented as\n    a small extension to LLVM and Clang, the interpreter reuses their strengths\n    such as the praised concise and expressive compiler diagnostics.\n\nextra:\n  recipe-maintainers:\n    - SylvainCorlay\n    - JohanMabille\n    - gouarin\n    - chrisburr\n",
 "req":{
  "__set__":true,
  "elements":[
   "clang_variant",
   "clangdev",
   "cmake",
   "compatible_pin_stub",
   "cxx_compiler_stub",
   "llvmdev",
   "ninja",
   "zlib"
  ]
 },
 "smithy_version":"3.4.1",
 "url":"https://github.com/root-mirror/cling/archive/v0.5.tar.gz",
 "version":"0.5"
}