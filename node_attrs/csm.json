{
 "PRed":[
  {
   "PR":{
    "__lazy_json__":"pr_json/243817504.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"CompilerRebuild",
    "migrator_version":1,
    "name":"Python 3.7, GCC 7, R 3.5.1, openBLAS 0.3.2"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  }
 ],
 "bad":{
  "code":404,
  "exception":"HTTP Error 404: Not Found",
  "traceback":[
   "Traceback (most recent call last):",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/auto_tick.xsh\", line 682, in main",
   "    hash_type=attrs.get('hash_type', 'sha256'))",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/auto_tick.xsh\", line 98, in run",
   "    migrate_return = migrator.migrate(recipe_dir, attrs, **kwargs)",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/migrators.xsh\", line 465, in migrate",
   "    new_patterns = self.get_hash_patterns('meta.yaml', urls, hash_type)",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/migrators.xsh\", line 382, in get_hash_patterns",
   "    hash = hash_url(url, hash_type)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/rever/tools.xsh\", line 207, in hash_url",
   "    for b in stream_url_progress(url, verb='Hashing', quiet=quiet):",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/rever/tools.xsh\", line 179, in stream_url_progress",
   "    with urllib.request.urlopen(url) as f:",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 222, in urlopen",
   "    return opener.open(url, data, timeout)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 531, in open",
   "    response = meth(req, response)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 641, in http_response",
   "    'http', request, response, code, msg, hdrs)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 563, in error",
   "    result = self._call_chain(*args)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 503, in _call_chain",
   "    result = func(*args)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 755, in http_error_302",
   "    return self.parent.open(new, timeout=req.timeout)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 531, in open",
   "    response = meth(req, response)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 641, in http_response",
   "    'http', request, response, code, msg, hdrs)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 569, in error",
   "    return self._call_chain(*args)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 503, in _call_chain",
   "    result = func(*args)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 649, in http_error_default",
   "    raise HTTPError(req.full_url, code, msg, hdrs, fp)",
   "urllib.error.HTTPError: HTTP Error 404: Not Found",
   ""
  ],
  "url":"https://codeload.github.com/sminster/csm/zip/3.0.3.3"
 },
 "conda-forge.yml":{
  "compiler_stack":"comp7",
  "max_py_ver":"37",
  "max_r_ver":"35",
  "provider":{
   "win":"azure"
  }
 },
 "feedstock_name":"csm",
 "hash_type":"sha256",
 "meta_yaml":{
  "about":{
   "description":"csm is a C++ API for terrestrial and planetary sensor models\n",
   "home":"http://github.com/sminster/csm",
   "license":"Public Domain",
   "license_file":"LICENSE",
   "summary":"The Community Sensor Model API"
  },
  "build":{
   "number":"1001"
  },
  "extra":{
   "recipe-maintainers":[
    "jlaura",
    "jlaura",
    "jlaura"
   ]
  },
  "package":{
   "name":"csm",
   "version":"v3.0.3.1"
  },
  "requirements":{
   "build":[
    "cxx_compiler_stub"
   ],
   "host":[
    "cmake",
    "cmake",
    "cmake"
   ]
  },
  "source":{
   "patches":[
    "patches/add_cmake.patch",
    "patches/add_cmake.patch",
    "patches/add_cmake.patch"
   ],
   "sha256":"dbb207704c54d9d0358c77e1773f6a11272110d4c609bde75f88eb78767da1a1",
   "url":"https://github.com/sminster/csm/archive/v3.0.3.1.tar.gz"
  },
  "test":{
   "commands":[
    "if not exist %LIBRARY_BIN%\\csmapi.dll exit 1",
    "if not exist %LIBRARY_INC%\\csm\\Ellipsoid.h exit 1",
    "test -e $PREFIX/lib/libcsmapi.dylib",
    "test -e $PREFIX/include/csm/Isd.h",
    "test -e $PREFIX/include/csm/csm.h",
    "test -e $PREFIX/lib/libcsmapi.so",
    "test -e $PREFIX/include/csm/Isd.h",
    "test -e $PREFIX/include/csm/csm.h"
   ]
  }
 },
 "name":"csm",
 "new_version":"3.0.3.3",
 "pinning_version":"2019.01.09",
 "raw_meta_yaml":"{% set name = \"csm\" %}\n{% set version = \"v3.0.3.1\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/sminster/{{ name }}/archive/{{ version }}.tar.gz\n  sha256: dbb207704c54d9d0358c77e1773f6a11272110d4c609bde75f88eb78767da1a1\n  patches:\n     - patches/add_cmake.patch  # Adds the CMake build system\n\nbuild:\n  number: 1001\n\nrequirements:\n  build:\n    - {{ compiler('cxx') }}  # [linux]\n  host:\n    - cmake\n\ntest:\n  commands:\n    - test -e $PREFIX/lib/libcsmapi.so  # [linux]\n    - test -e $PREFIX/lib/libcsmapi.dylib  # [osx]\n    - test -e $PREFIX/include/csm/Isd.h  # [not win]\n    - test -e $PREFIX/include/csm/csm.h  # [not win]\n    - if not exist %LIBRARY_BIN%\\csmapi.dll exit 1  # [win]\n    - if not exist %LIBRARY_INC%\\csm\\Ellipsoid.h exit 1  # [win]\n\nabout:\n  home: http://github.com/sminster/csm\n  license: Public Domain\n  license_file: LICENSE\n  summary: 'The Community Sensor Model API'\n  description: |\n    csm is a C++ API for terrestrial and planetary sensor models\n\nextra:\n  recipe-maintainers:\n    - jlaura\n",
 "req":{
  "__set__":true,
  "elements":[
   "cmake",
   "cxx_compiler_stub"
  ]
 },
 "smithy_version":"3.2.2",
 "url":"https://github.com/sminster/csm/archive/v3.0.3.1.tar.gz",
 "version":"v3.0.3.1"
}