{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/297178527.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.2.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/320922239.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.3.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/348691742.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/375678017.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MatplotlibBase",
    "migrator_version": 0,
    "name": "matplotlib-to-matplotlib-base"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/394492852.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.5.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/397283020.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.5.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/402266202.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.6.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/413204691.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.6.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/419192202.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.7.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/425725937.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.8.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/429818704.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.8.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/445632234.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.8.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/446546927.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.8.3"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/464956231.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.8.4"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/491916934.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.8.5"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/505511449.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": false,
 "conda-forge.yml": {
  "provider": {
   "win": "azure"
  }
 },
 "feedstock_name": "deepxde",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "DeepXDE is a deep learning library on top of TensorFlow. Use DeepXDE if you need a deep learning library that\nsolves forward and inverse partial differential equations (PDEs) via physics-informed neural network (PINN),\nsolves forward and inverse integro-differential equations (IDEs) via PINN,\nsolves forward and inverse fractional partial differential equations (fPDEs) via fractional PINN (fPINN),\napproximates functions from multi-fidelity data via multi-fidelity NN (MFNN),\napproximates nonlinear operators via deep operator network (DeepONet),\napproximates functions from a dataset with/without constraints.\n",
   "dev_url": "https://github.com/lululxvi/deepxde",
   "doc_url": "https://deepxde.readthedocs.io",
   "home": "https://github.com/lululxvi/deepxde",
   "license": "Apache-2.0",
   "license_family": "Apache",
   "license_file": "LICENSE",
   "summary": "Deep learning library for solving differential equations"
  },
  "build": {
   "number": "0",
   "script": "-m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "lululxvi",
    "lululxvi",
    "lululxvi"
   ]
  },
  "package": {
   "name": "deepxde",
   "version": "0.8.5"
  },
  "requirements": {
   "host": [
    "python",
    "pip",
    "numpy",
    "python",
    "pip",
    "numpy",
    "python",
    "pip",
    "numpy"
   ],
   "run": [
    "python",
    "numpy",
    "matplotlib-base",
    "salib",
    "scikit-learn",
    "scipy",
    "tensorflow",
    "python",
    "numpy",
    "matplotlib-base",
    "salib",
    "scikit-learn",
    "scipy",
    "tensorflow",
    "python",
    "numpy",
    "matplotlib-base",
    "salib",
    "scikit-learn",
    "scipy",
    "tensorflow"
   ]
  },
  "source": {
   "sha256": "48c1b0d7915ec7b1436a4c09e1582cff137465da70aa0399d7e6faa40eaf1fa9",
   "url": "https://pypi.io/packages/source/D/DeepXDE/DeepXDE-0.8.5.tar.gz"
  },
  "test": {
   "imports": null
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "numpy",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "matplotlib-base",
    "numpy",
    "python",
    "salib",
    "scikit-learn",
    "scipy",
    "tensorflow"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "meta_yaml": {
  "about": {
   "description": "DeepXDE is a deep learning library on top of TensorFlow. Use DeepXDE if you need a deep learning library that\nsolves forward and inverse partial differential equations (PDEs) via physics-informed neural network (PINN),\nsolves forward and inverse integro-differential equations (IDEs) via PINN,\nsolves forward and inverse fractional partial differential equations (fPDEs) via fractional PINN (fPINN),\napproximates functions from multi-fidelity data via multi-fidelity NN (MFNN),\napproximates nonlinear operators via deep operator network (DeepONet),\napproximates functions from a dataset with/without constraints.\n",
   "dev_url": "https://github.com/lululxvi/deepxde",
   "doc_url": "https://deepxde.readthedocs.io",
   "home": "https://github.com/lululxvi/deepxde",
   "license": "Apache-2.0",
   "license_family": "Apache",
   "license_file": "LICENSE",
   "summary": "Deep learning library for solving differential equations"
  },
  "build": {
   "number": "0",
   "script": "-m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "lululxvi",
    "lululxvi",
    "lululxvi",
    "lululxvi",
    "lululxvi",
    "lululxvi",
    "lululxvi",
    "lululxvi",
    "lululxvi"
   ]
  },
  "package": {
   "name": "deepxde",
   "version": "0.8.5"
  },
  "requirements": {
   "host": [
    "python",
    "pip",
    "numpy",
    "python",
    "pip",
    "numpy",
    "python",
    "pip",
    "numpy",
    "python",
    "pip",
    "numpy",
    "python",
    "pip",
    "numpy",
    "python",
    "pip",
    "numpy",
    "python",
    "pip",
    "numpy",
    "python",
    "pip",
    "numpy",
    "python",
    "pip",
    "numpy"
   ],
   "run": [
    "python",
    "numpy",
    "matplotlib-base",
    "salib",
    "scikit-learn",
    "scipy",
    "tensorflow",
    "python",
    "numpy",
    "matplotlib-base",
    "salib",
    "scikit-learn",
    "scipy",
    "tensorflow",
    "python",
    "numpy",
    "matplotlib-base",
    "salib",
    "scikit-learn",
    "scipy",
    "tensorflow",
    "python",
    "numpy",
    "matplotlib-base",
    "salib",
    "scikit-learn",
    "scipy",
    "tensorflow",
    "python",
    "numpy",
    "matplotlib-base",
    "salib",
    "scikit-learn",
    "scipy",
    "tensorflow",
    "python",
    "numpy",
    "matplotlib-base",
    "salib",
    "scikit-learn",
    "scipy",
    "tensorflow",
    "python",
    "numpy",
    "matplotlib-base",
    "salib",
    "scikit-learn",
    "scipy",
    "tensorflow",
    "python",
    "numpy",
    "matplotlib-base",
    "salib",
    "scikit-learn",
    "scipy",
    "tensorflow",
    "python",
    "numpy",
    "matplotlib-base",
    "salib",
    "scikit-learn",
    "scipy",
    "tensorflow"
   ]
  },
  "source": {
   "sha256": "48c1b0d7915ec7b1436a4c09e1582cff137465da70aa0399d7e6faa40eaf1fa9",
   "url": "https://pypi.io/packages/source/D/DeepXDE/DeepXDE-0.8.5.tar.gz"
  },
  "test": {
   "imports": [
    "deepxde",
    "deepxde",
    "deepxde"
   ]
  }
 },
 "name": "deepxde",
 "new_version": "0.8.5",
 "new_version_attempts": {
  "0.6.0": 1,
  "0.6.1": 1,
  "0.7.0": 1,
  "0.8.0": 1,
  "0.8.1": 1,
  "0.8.2": 1,
  "0.8.3": 1,
  "0.8.4": 1,
  "0.8.5": 1
 },
 "new_version_errors": {},
 "osx_64_meta_yaml": {
  "about": {
   "description": "DeepXDE is a deep learning library on top of TensorFlow. Use DeepXDE if you need a deep learning library that\nsolves forward and inverse partial differential equations (PDEs) via physics-informed neural network (PINN),\nsolves forward and inverse integro-differential equations (IDEs) via PINN,\nsolves forward and inverse fractional partial differential equations (fPDEs) via fractional PINN (fPINN),\napproximates functions from multi-fidelity data via multi-fidelity NN (MFNN),\napproximates nonlinear operators via deep operator network (DeepONet),\napproximates functions from a dataset with/without constraints.\n",
   "dev_url": "https://github.com/lululxvi/deepxde",
   "doc_url": "https://deepxde.readthedocs.io",
   "home": "https://github.com/lululxvi/deepxde",
   "license": "Apache-2.0",
   "license_family": "Apache",
   "license_file": "LICENSE",
   "summary": "Deep learning library for solving differential equations"
  },
  "build": {
   "number": "0",
   "script": "-m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "lululxvi",
    "lululxvi",
    "lululxvi"
   ]
  },
  "package": {
   "name": "deepxde",
   "version": "0.8.5"
  },
  "requirements": {
   "host": [
    "python",
    "pip",
    "numpy",
    "python",
    "pip",
    "numpy",
    "python",
    "pip",
    "numpy"
   ],
   "run": [
    "python",
    "numpy",
    "matplotlib-base",
    "salib",
    "scikit-learn",
    "scipy",
    "tensorflow",
    "python",
    "numpy",
    "matplotlib-base",
    "salib",
    "scikit-learn",
    "scipy",
    "tensorflow",
    "python",
    "numpy",
    "matplotlib-base",
    "salib",
    "scikit-learn",
    "scipy",
    "tensorflow"
   ]
  },
  "source": {
   "sha256": "48c1b0d7915ec7b1436a4c09e1582cff137465da70aa0399d7e6faa40eaf1fa9",
   "url": "https://pypi.io/packages/source/D/DeepXDE/DeepXDE-0.8.5.tar.gz"
  },
  "test": {
   "imports": [
    "deepxde",
    "deepxde",
    "deepxde"
   ]
  }
 },
 "osx_64_requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "numpy",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "matplotlib-base",
    "numpy",
    "python",
    "salib",
    "scikit-learn",
    "scipy",
    "tensorflow"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "pinning_version": "2020.10.18.07.06.23",
 "raw_meta_yaml": "{% set name = \"DeepXDE\" %}\n{% set version = \"0.8.5\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: 48c1b0d7915ec7b1436a4c09e1582cff137465da70aa0399d7e6faa40eaf1fa9\n\nbuild:\n  number: 0\n  # Skip windows with Python 2.7 as TensorFlow does not support it well.\n  skip: true  # [win and py27]\n  script: {{ PYTHON }} -m pip install . -vv\n\nrequirements:\n  host:\n    - python\n    - pip\n    - numpy\n  run:\n    - python\n    - {{ pin_compatible('numpy') }}\n    - matplotlib-base\n    - salib\n    - scikit-learn\n    - scipy\n    - tensorflow  # [py<38]\n\ntest:\n  imports:\n    # Skip the import test on Linux as TensorFlow require a more recent\n    # version of GLIBC++ than the VM used to build and test package.\n    - deepxde  # [not linux and py<38]\n\nabout:\n  home: https://github.com/lululxvi/deepxde\n  license: Apache-2.0\n  license_family: Apache\n  license_file: LICENSE\n  summary: Deep learning library for solving differential equations\n\n  description: |\n    DeepXDE is a deep learning library on top of TensorFlow. Use DeepXDE if you need a deep learning library that\n    solves forward and inverse partial differential equations (PDEs) via physics-informed neural network (PINN),\n    solves forward and inverse integro-differential equations (IDEs) via PINN,\n    solves forward and inverse fractional partial differential equations (fPDEs) via fractional PINN (fPINN),\n    approximates functions from multi-fidelity data via multi-fidelity NN (MFNN),\n    approximates nonlinear operators via deep operator network (DeepONet),\n    approximates functions from a dataset with/without constraints.\n  doc_url: https://deepxde.readthedocs.io\n  dev_url: https://github.com/lululxvi/deepxde\n\nextra:\n  recipe-maintainers:\n    - lululxvi\n",
 "req": {
  "__set__": true,
  "elements": [
   "matplotlib-base",
   "numpy",
   "pip",
   "python",
   "salib",
   "scikit-learn",
   "scipy",
   "tensorflow"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "numpy",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "matplotlib-base",
    "numpy",
    "python",
    "salib",
    "scikit-learn",
    "scipy",
    "tensorflow"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "smithy_version": "3.8.2",
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "numpy",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "matplotlib-base",
    "numpy",
    "python",
    "salib",
    "scikit-learn",
    "scipy",
    "tensorflow"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "url": "https://pypi.io/packages/source/D/DeepXDE/DeepXDE-0.2.0.tar.gz",
 "version": "0.8.5",
 "win_64_meta_yaml": {
  "about": {
   "description": "DeepXDE is a deep learning library on top of TensorFlow. Use DeepXDE if you need a deep learning library that\nsolves forward and inverse partial differential equations (PDEs) via physics-informed neural network (PINN),\nsolves forward and inverse integro-differential equations (IDEs) via PINN,\nsolves forward and inverse fractional partial differential equations (fPDEs) via fractional PINN (fPINN),\napproximates functions from multi-fidelity data via multi-fidelity NN (MFNN),\napproximates nonlinear operators via deep operator network (DeepONet),\napproximates functions from a dataset with/without constraints.\n",
   "dev_url": "https://github.com/lululxvi/deepxde",
   "doc_url": "https://deepxde.readthedocs.io",
   "home": "https://github.com/lululxvi/deepxde",
   "license": "Apache-2.0",
   "license_family": "Apache",
   "license_file": "LICENSE",
   "summary": "Deep learning library for solving differential equations"
  },
  "build": {
   "number": "0",
   "script": "-m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "lululxvi",
    "lululxvi",
    "lululxvi"
   ]
  },
  "package": {
   "name": "deepxde",
   "version": "0.8.5"
  },
  "requirements": {
   "host": [
    "python",
    "pip",
    "numpy",
    "python",
    "pip",
    "numpy",
    "python",
    "pip",
    "numpy"
   ],
   "run": [
    "python",
    "numpy",
    "matplotlib-base",
    "salib",
    "scikit-learn",
    "scipy",
    "tensorflow",
    "python",
    "numpy",
    "matplotlib-base",
    "salib",
    "scikit-learn",
    "scipy",
    "tensorflow",
    "python",
    "numpy",
    "matplotlib-base",
    "salib",
    "scikit-learn",
    "scipy",
    "tensorflow"
   ]
  },
  "source": {
   "sha256": "48c1b0d7915ec7b1436a4c09e1582cff137465da70aa0399d7e6faa40eaf1fa9",
   "url": "https://pypi.io/packages/source/D/DeepXDE/DeepXDE-0.8.5.tar.gz"
  },
  "test": {
   "imports": [
    "deepxde",
    "deepxde",
    "deepxde"
   ]
  }
 },
 "win_64_requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "numpy",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "matplotlib-base",
    "numpy",
    "python",
    "salib",
    "scikit-learn",
    "scipy",
    "tensorflow"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 }
}