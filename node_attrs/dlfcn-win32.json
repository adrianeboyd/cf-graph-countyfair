{
 "bad":{
  "code":404,
  "exception":"HTTP Error 404: Not Found",
  "traceback":[
   "Traceback (most recent call last):",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/auto_tick.py\", line 622, in main",
   "    migrator_uid, pr_json = run(",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/auto_tick.py\", line 136, in run",
   "    migrate_return = migrator.migrate(recipe_dir, feedstock_ctx.attrs, **kwargs)",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/migrators/core.py\", line 647, in migrate",
   "    new_patterns = self.get_hash_patterns(\"meta.yaml\", urls, hash_type)",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/migrators/core.py\", line 526, in get_hash_patterns",
   "    hash_ = hash_url(url, hash_type)",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/site-packages/rever/tools.xsh\", line 207, in hash_url",
   "    for b in stream_url_progress(url, verb='Hashing', quiet=quiet):",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/site-packages/rever/tools.xsh\", line 179, in stream_url_progress",
   "    with urllib.request.urlopen(url) as f:",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/urllib/request.py\", line 222, in urlopen",
   "    return opener.open(url, data, timeout)",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/urllib/request.py\", line 531, in open",
   "    response = meth(req, response)",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/urllib/request.py\", line 640, in http_response",
   "    response = self.parent.error(",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/urllib/request.py\", line 563, in error",
   "    result = self._call_chain(*args)",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/urllib/request.py\", line 502, in _call_chain",
   "    result = func(*args)",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/urllib/request.py\", line 755, in http_error_302",
   "    return self.parent.open(new, timeout=req.timeout)",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/urllib/request.py\", line 531, in open",
   "    response = meth(req, response)",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/urllib/request.py\", line 640, in http_response",
   "    response = self.parent.error(",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/urllib/request.py\", line 569, in error",
   "    return self._call_chain(*args)",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/urllib/request.py\", line 502, in _call_chain",
   "    result = func(*args)",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/urllib/request.py\", line 649, in http_error_default",
   "    raise HTTPError(req.full_url, code, msg, hdrs, fp)",
   "urllib.error.HTTPError: HTTP Error 404: Not Found",
   ""
  ],
  "url":"https://codeload.github.com/dlfcn-win32/dlfcn-win32/tar.gz/v19"
 },
 "conda-forge.yml":{},
 "feedstock_name":"dlfcn-win32",
 "hash_type":"sha256",
 "meta_yaml":{
  "about":{
   "home":"https://github.com/dlfcn-win32/dlfcn-win32",
   "license":"LGPL-2.1",
   "license_file":"COPYING",
   "summary":"dlfcn-win32 is an implementation of dlfcn for Windows."
  },
  "build":{
   "number":"0",
   "run_exports":[
    "subpackage_stub",
    "subpackage_stub",
    "subpackage_stub"
   ],
   "skip":true
  },
  "extra":{
   "recipe-maintainers":[
    "seanyen",
    "traversaro",
    "seanyen",
    "traversaro",
    "seanyen",
    "traversaro"
   ]
  },
  "package":{
   "name":"dlfcn-win32",
   "version":"1.2.0"
  },
  "requirements":{
   "build":[
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake"
   ]
  },
  "source":{
   "sha256":"f18a412e84d8b701e61a78252411fe8c72587f52417c1ef21ca93604de1b9c55",
   "url":"https://github.com/dlfcn-win32/dlfcn-win32/archive/v1.2.0.tar.gz"
  },
  "test":{
   "commands":[
    "if exist %PREFIX%\\\\Library\\\\share\\\\dlfcn-win32\\\\dlfcn-win32-config.cmake (exit 0) else (exit 1)",
    "if exist %PREFIX%\\\\Library\\\\share\\\\dlfcn-win32\\\\dlfcn-win32-config.cmake (exit 0) else (exit 1)",
    "if exist %PREFIX%\\\\Library\\\\share\\\\dlfcn-win32\\\\dlfcn-win32-config.cmake (exit 0) else (exit 1)"
   ]
  }
 },
 "name":"dlfcn-win32",
 "new_version":"19",
 "raw_meta_yaml":"{% set name = \"dlfcn-win32\" %}\n{% set version = \"1.2.0\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/dlfcn-win32/{{ name }}/archive/v{{ version }}.tar.gz\n  sha256: f18a412e84d8b701e61a78252411fe8c72587f52417c1ef21ca93604de1b9c55\n\nbuild:\n  number: 0\n  skip: true  # [not win or vc<14]\n  run_exports:\n    - {{ pin_subpackage('dlfcn-win32', max_pin='x.x') }}\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - cmake\n\ntest:\n  commands:\n    - if exist %PREFIX%\\\\Library\\\\share\\\\dlfcn-win32\\\\dlfcn-win32-config.cmake (exit 0) else (exit 1)\n\nabout:\n  home: https://github.com/dlfcn-win32/dlfcn-win32\n  license: LGPL-2.1\n  license_file: COPYING\n  summary: 'dlfcn-win32 is an implementation of dlfcn for Windows.'\n\nextra:\n  recipe-maintainers:\n    - seanyen\n    - traversaro\n",
 "req":{
  "__set__":true,
  "elements":[
   "c_compiler_stub",
   "cmake",
   "cxx_compiler_stub"
  ]
 },
 "requirements":{
  "build":{
   "__set__":true,
   "elements":[
    "c_compiler_stub",
    "cmake",
    "cxx_compiler_stub"
   ]
  },
  "host":{
   "__set__":true,
   "elements":[]
  },
  "run":{
   "__set__":true,
   "elements":[]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "strong_exports":false,
 "total_requirements":{
  "build":{
   "__set__":true,
   "elements":[
    "c_compiler_stub",
    "cmake",
    "cxx_compiler_stub"
   ]
  },
  "host":{
   "__set__":true,
   "elements":[]
  },
  "run":{
   "__set__":true,
   "elements":[]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "url":"https://github.com/dlfcn-win32/dlfcn-win32/archive/v1.2.0.tar.gz",
 "version":"1.2.0"
}