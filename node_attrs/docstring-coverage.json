{
 "PRed":[
  {
   "PR":{
    "__lazy_json__":"pr_json/217553309.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"CompilerRebuild",
    "migrator_version":1,
    "name":"Python 3.7, GCC 7, R 3.5.1, openBLAS 0.3.2"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/335660546.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"MigrationYaml",
    "migrator_object_version":1,
    "migrator_version":0,
    "name":"python38"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "bad":{
  "exception":"Command '['pushd', 'None']' returned non-zero exit status 1.",
  "traceback":[
   "Traceback (most recent call last):",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/auto_tick.py\", line 901, in main",
   "    hash_type=attrs.get(\"hash_type\", \"sha256\"),",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/auto_tick.py\", line 179, in run",
   "    migrator.run_post_piggyback_migrations(recipe_dir, feedstock_ctx.attrs, **kwargs)",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/migrators/core.py\", line 330, in run_post_piggyback_migrations",
   "    mini_migrator.migrate(recipe_dir, attrs, **kwargs)",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/migrators/core.py\", line 133, in migrate",
   "    with indir(cb_work_dir):",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/contextlib.py\", line 112, in __enter__",
   "    return next(self.gen)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/xonsh/lib/os.xsh\", line 10, in indir",
   "    ![pushd @(d)]",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/xonsh/__amalgam__.py\", line 22637, in subproc_captured_hiddenobject",
   "    return run_subproc(cmds, captured=\"hiddenobject\")",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/xonsh/__amalgam__.py\", line 22600, in run_subproc",
   "    command.end()",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/xonsh/__amalgam__.py\", line 15728, in end",
   "    self._end(tee_output=tee_output)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/xonsh/__amalgam__.py\", line 15747, in _end",
   "    self._raise_subproc_error()",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/xonsh/__amalgam__.py\", line 15873, in _raise_subproc_error",
   "    raise subprocess.CalledProcessError(rtn, spec.args, output=self.output)",
   "subprocess.CalledProcessError: Command '['pushd', 'None']' returned non-zero exit status 1.",
   ""
  ]
 },
 "conda-forge.yml":{
  "compiler_stack":"comp7",
  "max_py_ver":"37",
  "max_r_ver":"35"
 },
 "feedstock_name":"docstring-coverage",
 "hash_type":"md5",
 "meta_yaml":{
  "about":{
   "home":"https://bitbucket.org/DataGreed/docstring-coverage/",
   "license":"MIT",
   "summary":"A simple audit tool for examining python source files for missing docstrings."
  },
  "build":{
   "entry_points":[
    "docstring-coverage = docstringcoverage.cover:main",
    "docstring-coverage = docstringcoverage.cover:main",
    "docstring-coverage = docstringcoverage.cover:main"
   ],
   "number":"1000",
   "script":"python setup.py install --single-version-externally-managed --record record.txt",
   "skip":true
  },
  "extra":{
   "recipe-maintainers":[
    "jakirkham",
    "jakirkham",
    "jakirkham"
   ]
  },
  "package":{
   "name":"docstring-coverage",
   "version":"0.3.4"
  },
  "requirements":{
   "build":[
    "python",
    "setuptools",
    "python",
    "setuptools",
    "python",
    "setuptools"
   ],
   "run":[
    "python",
    "python",
    "python"
   ]
  },
  "source":{
   "fn":"docstring-coverage-0.3.4.tar.gz",
   "md5":"460d006800d8045c00b1763583222452",
   "url":"https://pypi.io/packages/source/d/docstring-coverage/docstring-coverage-0.3.4.tar.gz"
  },
  "test":{
   "commands":[
    "docstring-coverage --help",
    "docstring-coverage --help",
    "docstring-coverage --help"
   ],
   "imports":[
    "docstringcoverage",
    "docstringcoverage",
    "docstringcoverage"
   ]
  }
 },
 "name":"docstring-coverage",
 "new_version":"0.3.4",
 "pinning_version":"2019.11.01",
 "raw_meta_yaml":"{% set version = \"0.3.4\" %}\n\npackage:\n  name: docstring-coverage\n  version: {{ version }}\n\nsource:\n  fn: docstring-coverage-{{ version }}.tar.gz\n  url: https://pypi.io/packages/source/d/docstring-coverage/docstring-coverage-{{ version }}.tar.gz\n  md5: 460d006800d8045c00b1763583222452\n\nbuild:\n  number: 1000\n  skip: true  # [py3k]\n  script: python setup.py install --single-version-externally-managed --record record.txt\n  entry_points:\n    - docstring-coverage = docstringcoverage.cover:main\n\nrequirements:\n  build:\n    - python\n    - setuptools\n\n  run:\n    - python\n\ntest:\n  imports:\n    - docstringcoverage\n\n  commands:\n    - docstring-coverage --help\n\nabout:\n  home: https://bitbucket.org/DataGreed/docstring-coverage/\n  license: MIT\n  summary: A simple audit tool for examining python source files for missing docstrings.\n\nextra:\n  recipe-maintainers:\n    - jakirkham\n",
 "req":{
  "__set__":true,
  "elements":[
   "python",
   "setuptools"
  ]
 },
 "requirements":{
  "build":{
   "__set__":true,
   "elements":[
    "python",
    "setuptools"
   ]
  },
  "host":{
   "__set__":true,
   "elements":[]
  },
  "run":{
   "__set__":true,
   "elements":[
    "python"
   ]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "smithy_version":"3.6.1",
 "strong_exports":false,
 "total_requirements":{
  "build":{
   "__set__":true,
   "elements":[
    "python",
    "setuptools"
   ]
  },
  "host":{
   "__set__":true,
   "elements":[]
  },
  "run":{
   "__set__":true,
   "elements":[
    "python"
   ]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "url":"https://pypi.io/packages/source/d/docstring-coverage/docstring-coverage-0.3.4.tar.gz",
 "version":"0.3.4"
}