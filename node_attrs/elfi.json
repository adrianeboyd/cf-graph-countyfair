{
 "PRed":[
  {
   "PR":{
    "__lazy_json__":"pr_json/301712997.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Rebuild",
    "migrator_version":0,
    "name":"graphviz-2.40"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  }
 ],
 "bad":{
  "code":404,
  "exception":"HTTP Error 404: Not Found",
  "traceback":[
   "Traceback (most recent call last):",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/auto_tick.py\", line 688, in main",
   "    hash_type=attrs.get(\"hash_type\", \"sha256\"),",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/auto_tick.py\", line 147, in run",
   "    migrate_return = migrator.migrate(recipe_dir, feedstock_ctx.attrs, **kwargs)",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/migrators/version.py\", line 224, in migrate",
   "    new_patterns = self.get_hash_patterns(\"meta.yaml\", urls, hash_type)",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/migrators/version.py\", line 103, in get_hash_patterns",
   "    hash_ = hash_url(url, hash_type)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/rever/tools.xsh\", line 207, in hash_url",
   "    for b in stream_url_progress(url, verb='Hashing', quiet=quiet):",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/rever/tools.xsh\", line 179, in stream_url_progress",
   "    with urllib.request.urlopen(url) as f:",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 222, in urlopen",
   "    return opener.open(url, data, timeout)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 531, in open",
   "    response = meth(req, response)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 641, in http_response",
   "    'http', request, response, code, msg, hdrs)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 563, in error",
   "    result = self._call_chain(*args)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 503, in _call_chain",
   "    result = func(*args)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 755, in http_error_302",
   "    return self.parent.open(new, timeout=req.timeout)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 531, in open",
   "    response = meth(req, response)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 641, in http_response",
   "    'http', request, response, code, msg, hdrs)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 569, in error",
   "    return self._call_chain(*args)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 503, in _call_chain",
   "    result = func(*args)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 649, in http_error_default",
   "    raise HTTPError(req.full_url, code, msg, hdrs, fp)",
   "urllib.error.HTTPError: HTTP Error 404: Not Found",
   ""
  ],
  "url":"https://codeload.github.com/elfi-dev/elfi/tar.gz/v0.7.5"
 },
 "conda-forge.yml":{},
 "feedstock_name":"elfi",
 "hash_type":"sha256",
 "meta_yaml":{
  "about":{
   "description":"ELFI is a statistical software package written in Python for likelihood-free\ninference (LFI) such as Approximate Bayesian Computation (ABC).\n",
   "dev_url":"https://github.com/elfi-dev/elfi",
   "home":"http://www.elfi.ai/",
   "license":"BSD-3",
   "license_family":"BSD",
   "license_file":"LICENSE",
   "summary":"ELFI - Engine for Likelihood-Free Inference"
  },
  "build":{
   "noarch":"python",
   "number":"1",
   "script":" -m pip install . --no-deps --ignore-installed --no-cache-dir -vvv"
  },
  "extra":{
   "recipe-maintainers":[
    "johnlees",
    "hpesonen",
    "johnlees",
    "hpesonen",
    "johnlees",
    "hpesonen"
   ]
  },
  "package":{
   "name":"elfi",
   "version":"0.7.4"
  },
  "requirements":{
   "host":[
    "python >=3",
    "pip",
    "python >=3",
    "pip",
    "python >=3",
    "pip"
   ],
   "run":[
    "python >=3",
    "numpy",
    "scipy >=0.19",
    "matplotlib",
    "GPy",
    "networkX >=1.11,<2.0",
    "ipyparallel",
    "toolz",
    "scikit-learn",
    "graphviz",
    "python >=3",
    "numpy",
    "scipy >=0.19",
    "matplotlib",
    "GPy",
    "networkX >=1.11,<2.0",
    "ipyparallel",
    "toolz",
    "scikit-learn",
    "graphviz",
    "python >=3",
    "numpy",
    "scipy >=0.19",
    "matplotlib",
    "GPy",
    "networkX >=1.11,<2.0",
    "ipyparallel",
    "toolz",
    "scikit-learn",
    "graphviz"
   ]
  },
  "source":{
   "sha256":"b930870a3e904bef88709ecd65545a2b030962a554324b21dc6aeb5ae9473a99",
   "url":"https://github.com/elfi-dev/elfi/archive/v0.7.4.tar.gz"
  },
  "test":{
   "imports":[
    "elfi",
    "elfi",
    "elfi"
   ]
  }
 },
 "name":"elfi",
 "new_version":"0.7.5",
 "pinning_version":"2019.07.26",
 "raw_meta_yaml":"{% set name = \"elfi\" %}\n{% set version = \"0.7.4\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/elfi-dev/{{ name|lower }}/archive/v{{ version }}.tar.gz\n  sha256: b930870a3e904bef88709ecd65545a2b030962a554324b21dc6aeb5ae9473a99\n\nbuild:\n  number: 1\n  noarch: python\n  script: \"{{ PYTHON }} -m pip install . --no-deps --ignore-installed --no-cache-dir -vvv\"\n\nrequirements:\n  host:\n    - python >=3\n    - pip\n\n  run:\n    - python >=3\n    - numpy\n    - scipy >=0.19\n    - matplotlib\n    - GPy\n    - networkX >=1.11,<2.0\n    - ipyparallel\n    - toolz\n    - scikit-learn\n    - graphviz\n\ntest:\n  imports:\n    - elfi\n\nabout:\n  home: http://www.elfi.ai/\n  license: BSD-3\n  license_family: BSD\n  license_file: LICENSE\n  summary: 'ELFI - Engine for Likelihood-Free Inference'\n  description: |\n    ELFI is a statistical software package written in Python for likelihood-free\n    inference (LFI) such as Approximate Bayesian Computation (ABC).\n  dev_url: https://github.com/elfi-dev/elfi\n\nextra:\n  recipe-maintainers:\n    - johnlees\n    - hpesonen\n",
 "req":{
  "__set__":true,
  "elements":[
   "gpy",
   "graphviz",
   "ipyparallel",
   "matplotlib",
   "networkx",
   "numpy",
   "pip",
   "python",
   "scikit-learn",
   "scipy",
   "toolz"
  ]
 },
 "requirements":{
  "build":{
   "__set__":true,
   "elements":[]
  },
  "host":{
   "__set__":true,
   "elements":[
    "pip",
    "python"
   ]
  },
  "run":{
   "__set__":true,
   "elements":[
    "gpy",
    "graphviz",
    "ipyparallel",
    "matplotlib",
    "networkx",
    "numpy",
    "python",
    "scikit-learn",
    "scipy",
    "toolz"
   ]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "smithy_version":"3.4.1",
 "strong_exports":false,
 "total_requirements":{
  "build":{
   "__set__":true,
   "elements":[]
  },
  "host":{
   "__set__":true,
   "elements":[
    "pip",
    "python >=3"
   ]
  },
  "run":{
   "__set__":true,
   "elements":[
    "GPy",
    "graphviz",
    "ipyparallel",
    "matplotlib",
    "networkX >=1.11,<2.0",
    "numpy",
    "python >=3",
    "scikit-learn",
    "scipy >=0.19",
    "toolz"
   ]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "url":"https://github.com/elfi-dev/elfi/archive/v0.7.4.tar.gz",
 "version":"0.7.4"
}