{
 "PRed":[
  {
   "PR":{
    "__lazy_json__":"pr_json/199908988.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Noarch",
    "migrator_version":0
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/202040511.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"0.4.14"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/214059085.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"0.4.15"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "bad":false,
 "conda-forge.yml":{
  "provider":{
   "win":"azure"
  }
 },
 "feedstock_name":"greenlet",
 "hash_type":"sha256",
 "meta_yaml":{
  "about":{
   "description":"The greenlet package is a spin-off of Stackless, a version of CPython that\nsupports micro-threads called \"tasklets\". Tasklets run pseudo-concurrently\n(typically in a single or a few OS-level threads) and are synchronized with\ndata exchanges on \"channels\".\n\nA \"greenlet\", on the other hand, is a still more primitive notion of\nmicro-thread with no implicit scheduling; coroutines, in other words. This\nis useful when you want to control exactly when your code runs. You can\nbuild custom scheduled micro-threads on top of greenlet; however, it seems\nthat greenlets are useful on their own as a way to make advanced control\nflow structures. For example, we can recreate generators; the difference\nwith Python's own generators is that our generators can call nested\nfunctions and the nested functions can yield values too. Additionally,\nyou don't need a \"yield\" keyword. See the example in\ntests/test_generator.py.\n\nGreenlets are provided as a C extension module for the regular unmodified\ninterpreter.\n\nGreenlets are lightweight coroutines for in-process concurrent programming.\n",
   "dev_url":"https://github.com/python-greenlet/greenlet",
   "doc_url":"https://greenlet.readthedocs.io",
   "home":"https://github.com/python-greenlet/greenlet",
   "license":"MIT",
   "license_family":"MIT",
   "license_file":"LICENSE",
   "summary":"Lightweight in-process concurrent programming"
  },
  "build":{
   "number":"0",
   "script":" -m pip install --no-deps --ignore-installed ."
  },
  "extra":{
   "recipe-maintainers":[
    "curtisalexander",
    "nicoddemus",
    "curtisalexander",
    "nicoddemus",
    "curtisalexander",
    "nicoddemus"
   ]
  },
  "package":{
   "name":"greenlet",
   "version":"0.4.15"
  },
  "requirements":{
   "build":[
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub"
   ],
   "host":[
    "pip",
    "python",
    "pip",
    "python",
    "pip",
    "python"
   ],
   "run":[
    "python",
    "python",
    "python"
   ]
  },
  "source":{
   "fn":"greenlet-0.4.15.tar.gz",
   "sha256":"9416443e219356e3c31f1f918a91badf2e37acf297e2fa13d24d1cc2380f8fbc",
   "url":"https://pypi.io/packages/source/g/greenlet/greenlet-0.4.15.tar.gz"
  },
  "test":{
   "imports":[
    "greenlet",
    "greenlet",
    "greenlet"
   ]
  }
 },
 "name":"greenlet",
 "new_version":"0.4.15",
 "pinning_version":"2018.08.31",
 "raw_meta_yaml":"{% set name = \"greenlet\" %}\n{% set version = \"0.4.15\" %}\n{% set sha256 = \"9416443e219356e3c31f1f918a91badf2e37acf297e2fa13d24d1cc2380f8fbc\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  fn: {{ name }}-{{ version }}.tar.gz\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: {{ sha256 }}\n\nbuild:\n  number: 0\n  script: \"{{ PYTHON }} -m pip install --no-deps --ignore-installed .\"\n\nrequirements:\n  build:\n    - {{ compiler(\"c\") }}\n\n  host:\n    - pip\n    - python\n\n  run:\n    - python\n\ntest:\n  imports:\n    - greenlet\n\nabout:\n  home: https://github.com/python-greenlet/greenlet\n  license: MIT\n  license_family: MIT\n  license_file: LICENSE\n  summary: 'Lightweight in-process concurrent programming'\n\n  description: |\n    The greenlet package is a spin-off of Stackless, a version of CPython that\n    supports micro-threads called \"tasklets\". Tasklets run pseudo-concurrently\n    (typically in a single or a few OS-level threads) and are synchronized with\n    data exchanges on \"channels\".\n\n    A \"greenlet\", on the other hand, is a still more primitive notion of\n    micro-thread with no implicit scheduling; coroutines, in other words. This\n    is useful when you want to control exactly when your code runs. You can\n    build custom scheduled micro-threads on top of greenlet; however, it seems\n    that greenlets are useful on their own as a way to make advanced control\n    flow structures. For example, we can recreate generators; the difference\n    with Python's own generators is that our generators can call nested\n    functions and the nested functions can yield values too. Additionally,\n    you don't need a \"yield\" keyword. See the example in\n    tests/test_generator.py.\n\n    Greenlets are provided as a C extension module for the regular unmodified\n    interpreter.\n\n    Greenlets are lightweight coroutines for in-process concurrent programming.\n  doc_url: https://greenlet.readthedocs.io\n  dev_url: https://github.com/python-greenlet/greenlet\n\nextra:\n  recipe-maintainers:\n    - curtisalexander\n    - nicoddemus\n",
 "req":{
  "__set__":true,
  "elements":[
   "c_compiler_stub",
   "pip",
   "python"
  ]
 },
 "smithy_version":"3.1.12",
 "time":1568070545.24203,
 "url":"https://pypi.io/packages/source/g/greenlet/greenlet-0.4.15.tar.gz",
 "version":"0.4.15"
}