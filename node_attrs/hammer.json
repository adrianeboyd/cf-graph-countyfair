{
 "PRed":[
  {
   "PR":{
    "__lazy_json__":"pr_json/393197258.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"MigrationYaml",
    "migrator_object_version":2,
    "migrator_version":0,
    "name":"boost172"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/393201024.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"MigrationYaml",
    "migrator_object_version":1,
    "migrator_version":0,
    "name":"python38"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/393201479.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"MatplotlibBase",
    "migrator_version":0,
    "name":"matplotlib-to-matplotlib-base"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/393663985.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"MigrationYaml",
    "migrator_object_version":1,
    "migrator_version":0,
    "name":"root_base6202"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "bad":{
  "exception":"<class 'requests.exceptions.ReadTimeout'>: A connection-level exception occurred: HTTPSConnectionPool(host='api.github.com', port=443): Read timed out. (read timeout=10)",
  "traceback":[
   "Traceback (most recent call last):",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 426, in _make_request",
   "    six.raise_from(e, None)",
   "  File \"<string>\", line 3, in raise_from",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 421, in _make_request",
   "    httplib_response = conn.getresponse()",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/http/client.py\", line 1344, in getresponse",
   "    response.begin()",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/http/client.py\", line 306, in begin",
   "    version, status, reason = self._read_status()",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/http/client.py\", line 267, in _read_status",
   "    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/socket.py\", line 589, in readinto",
   "    return self._sock.recv_into(b)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/urllib3/contrib/pyopenssl.py\", line 326, in recv_into",
   "    raise timeout(\"The read operation timed out\")",
   "socket.timeout: The read operation timed out",
   "",
   "During handling of the above exception, another exception occurred:",
   "",
   "Traceback (most recent call last):",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/requests/adapters.py\", line 449, in send",
   "    timeout=timeout",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 725, in urlopen",
   "    method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/urllib3/util/retry.py\", line 403, in increment",
   "    raise six.reraise(type(error), error, _stacktrace)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/urllib3/packages/six.py\", line 735, in reraise",
   "    raise value",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 677, in urlopen",
   "    chunked=chunked,",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 428, in _make_request",
   "    self._raise_timeout(err=e, url=url, timeout_value=read_timeout)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 336, in _raise_timeout",
   "    self, url, \"Read timed out. (read timeout=%s)\" % timeout_value",
   "urllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool(host='api.github.com', port=443): Read timed out. (read timeout=10)",
   "",
   "During handling of the above exception, another exception occurred:",
   "",
   "Traceback (most recent call last):",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/github3/models.py\", line 196, in _request",
   "    return request_method(*args, **kwargs)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/requests/sessions.py\", line 543, in get",
   "    return self.request('GET', url, **kwargs)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/github3/session.py\", line 169, in request",
   "    response = super(GitHubSession, self).request(*args, **kwargs)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/requests/sessions.py\", line 530, in request",
   "    resp = self.send(prep, **send_kwargs)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/requests/sessions.py\", line 643, in send",
   "    r = adapter.send(request, **kwargs)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/requests/adapters.py\", line 529, in send",
   "    raise ReadTimeout(e, request=request)",
   "requests.exceptions.ReadTimeout: HTTPSConnectionPool(host='api.github.com', port=443): Read timed out. (read timeout=10)",
   "",
   "During handling of the above exception, another exception occurred:",
   "",
   "Traceback (most recent call last):",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/auto_tick.py\", line 785, in main",
   "    hash_type=attrs.get(\"hash_type\", \"sha256\"),",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/auto_tick.py\", line 155, in run",
   "    fork=fork,",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/git_utils.py\", line 111, in get_repo",
   "    repo = gh.repository(\"conda-forge\", feedstock_reponame)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/github3/github.py\", line 1981, in repository",
   "    json = self._json(self._get(url), 200)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/github3/models.py\", line 211, in _get",
   "    return self._request(\"get\", url, **kwargs)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/github3/models.py\", line 201, in _request",
   "    raise exceptions.ConnectionError(exc)",
   "github3.exceptions.ConnectionError: <class 'requests.exceptions.ReadTimeout'>: A connection-level exception occurred: HTTPSConnectionPool(host='api.github.com', port=443): Read timed out. (read timeout=10)",
   ""
  ]
 },
 "conda-forge.yml":{},
 "feedstock_name":"hammer",
 "hash_type":"sha256",
 "meta_yaml":{
  "about":{
   "description":"A C++ software library, designed to provide fast and efficient reweighting\nof large Monte Carlo datasets containing semileptonic b-Hadron decays to\nany desired New Physics, or to any description of the hadronic matrix\nelements. See the HAMMER website for more information.\n",
   "dev_url":"https://gitlab.com/mpapucci/Hammer",
   "doc_url":"https://hammer.physics.lbl.gov/HammerManual.pdf",
   "home":"https://hammer.physics.lbl.gov/",
   "license":"GPL-3.0-only",
   "license_family":"GPL",
   "license_file":"COPYING",
   "summary":"Helicity Amplitude Module for Matrix Element Reweighting"
  },
  "build":{
   "number":"4",
   "skip":true
  },
  "extra":{
   "recipe-maintainers":[
    "chrisburr",
    "chrisburr",
    "chrisburr"
   ]
  },
  "package":{
   "name":"hammer",
   "version":"1.0.0"
  },
  "requirements":{
   "build":[
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "pkg-config",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "pkg-config",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "pkg-config"
   ],
   "host":[
    "python",
    "root_base",
    "root-binaries",
    "root-dependencies",
    "boost-cpp",
    "hepmc2",
    "yaml-cpp",
    "numpy",
    "matplotlib-base",
    "cython",
    "cymove",
    "python",
    "root_base",
    "root-binaries",
    "root-dependencies",
    "boost-cpp",
    "hepmc2",
    "yaml-cpp",
    "numpy",
    "matplotlib-base",
    "cython",
    "cymove",
    "python",
    "root_base",
    "root-binaries",
    "root-dependencies",
    "boost-cpp",
    "hepmc2",
    "yaml-cpp",
    "numpy",
    "matplotlib-base",
    "cython",
    "cymove"
   ],
   "run":[
    "python",
    "boost-cpp",
    "yaml-cpp",
    "hepmc2",
    "numpy",
    "matplotlib-base",
    "python",
    "boost-cpp",
    "yaml-cpp",
    "hepmc2",
    "numpy",
    "matplotlib-base",
    "python",
    "boost-cpp",
    "yaml-cpp",
    "hepmc2",
    "numpy",
    "matplotlib-base"
   ]
  },
  "source":{
   "sha256":"8cf6ddbed81b931887d8432e956b125bdda31f7d2a8fbbe40eaff13b1e3473ab",
   "url":"https://gitlab.com/mpapucci/Hammer/-/archive/v1.0.0/Hammer-v1.0.0.tar.gz"
  },
  "test":{
   "commands":[
    "cd $CONDA_PREFIX/share/Hammer/examples",
    "./demo01",
    "./demo01card",
    "./demo01root",
    "./demo02",
    "./demo02root",
    "./demo03",
    "./demo03root",
    "./demo04",
    "./demo04root",
    "./demo04root2",
    "./demo05",
    "./demo07",
    "./demo08",
    "./demo09",
    "./demo10",
    "python demo03.py",
    "python demo04.py",
    "cd $CONDA_PREFIX/share/Hammer/examples",
    "./demo01",
    "./demo01card",
    "./demo01root",
    "./demo02",
    "./demo02root",
    "./demo03",
    "./demo03root",
    "./demo04",
    "./demo04root",
    "./demo04root2",
    "./demo05",
    "./demo07",
    "./demo08",
    "./demo09",
    "./demo10",
    "python demo03.py",
    "python demo04.py",
    "cd $CONDA_PREFIX/share/Hammer/examples",
    "./demo01",
    "./demo01card",
    "./demo01root",
    "./demo02",
    "./demo02root",
    "./demo03",
    "./demo03root",
    "./demo04",
    "./demo04root",
    "./demo04root2",
    "./demo05",
    "./demo07",
    "./demo08",
    "./demo09",
    "./demo10",
    "python demo03.py",
    "python demo04.py"
   ],
   "imports":[
    "hammer",
    "hammer",
    "hammer"
   ]
  }
 },
 "name":"hammer",
 "new_version":false,
 "pinning_version":"2020.03.24",
 "raw_meta_yaml":"{% set name = \"hammer\" %}\n{% set version = \"1.0.0\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://gitlab.com/mpapucci/Hammer/-/archive/v{{ version }}/Hammer-v{{ version }}.tar.gz\n  sha256: 8cf6ddbed81b931887d8432e956b125bdda31f7d2a8fbbe40eaff13b1e3473ab\n\nbuild:\n  number: 4\n  skip: true  # [win or py2k]\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - cmake\n    - make\n    - pkg-config\n  host:\n    - python\n    - root_base\n    - root-binaries\n    - root-dependencies\n    - boost-cpp\n    - hepmc2\n    - yaml-cpp\n    - numpy\n    - matplotlib-base\n    - cython\n    - cymove\n  run:\n    - python\n    - boost-cpp\n    - yaml-cpp\n    - hepmc2\n    - {{ pin_compatible('numpy') }}\n    - matplotlib-base\n\ntest:\n  imports:\n    - hammer\n  commands:\n    - cd $CONDA_PREFIX/share/Hammer/examples\n    - ./demo01\n    - ./demo01card\n    - ./demo01root\n    - ./demo02\n    - ./demo02root\n    - ./demo03\n    - ./demo03root\n    - ./demo04\n    # Disabled due to being very slow\n    # - ./demo04parallel\n    - ./demo04root\n    - ./demo04root2\n    - ./demo05\n    - ./demo07\n    - ./demo08\n    - ./demo09\n    - ./demo10\n    - python demo03.py\n    - python demo04.py\n\nabout:\n  home: https://hammer.physics.lbl.gov/\n  license: GPL-3.0-only\n  license_family: GPL\n  license_file: COPYING\n  summary: 'Helicity Amplitude Module for Matrix Element Reweighting'\n\n  description: |\n    A C++ software library, designed to provide fast and efficient reweighting\n    of large Monte Carlo datasets containing semileptonic b-Hadron decays to\n    any desired New Physics, or to any description of the hadronic matrix\n    elements. See the HAMMER website for more information.\n  doc_url: https://hammer.physics.lbl.gov/HammerManual.pdf\n  dev_url: https://gitlab.com/mpapucci/Hammer\n\nextra:\n  recipe-maintainers:\n    - chrisburr\n",
 "req":{
  "__set__":true,
  "elements":[
   "boost-cpp",
   "c_compiler_stub",
   "cmake",
   "cxx_compiler_stub",
   "cymove",
   "cython",
   "hepmc2",
   "make",
   "matplotlib-base",
   "numpy",
   "pkg-config",
   "python",
   "root-binaries",
   "root-dependencies",
   "root_base",
   "yaml-cpp"
  ]
 },
 "requirements":{
  "build":{
   "__set__":true,
   "elements":[
    "c_compiler_stub",
    "cmake",
    "cxx_compiler_stub",
    "make",
    "pkg-config"
   ]
  },
  "host":{
   "__set__":true,
   "elements":[
    "boost-cpp",
    "cymove",
    "cython",
    "hepmc2",
    "matplotlib-base",
    "numpy",
    "python",
    "root-binaries",
    "root-dependencies",
    "root_base",
    "yaml-cpp"
   ]
  },
  "run":{
   "__set__":true,
   "elements":[
    "boost-cpp",
    "hepmc2",
    "matplotlib-base",
    "numpy",
    "python",
    "yaml-cpp"
   ]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "smithy_version":"No azure token. Create a token and\nput it in ~/.conda-smithy/azure.token\n3.6.15",
 "strong_exports":false,
 "total_requirements":{
  "build":{
   "__set__":true,
   "elements":[
    "c_compiler_stub",
    "cmake",
    "cxx_compiler_stub",
    "make",
    "pkg-config"
   ]
  },
  "host":{
   "__set__":true,
   "elements":[
    "boost-cpp",
    "cymove",
    "cython",
    "hepmc2",
    "matplotlib-base",
    "numpy",
    "python",
    "root-binaries",
    "root-dependencies",
    "root_base",
    "yaml-cpp"
   ]
  },
  "run":{
   "__set__":true,
   "elements":[
    "boost-cpp",
    "hepmc2",
    "matplotlib-base",
    "numpy",
    "python",
    "yaml-cpp"
   ]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "url":"https://gitlab.com/mpapucci/Hammer/-/archive/v1.0.0/Hammer-v1.0.0.tar.gz",
 "version":"1.0.0"
}