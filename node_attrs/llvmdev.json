{
 "PRed":[
  {
   "PR":{
    "__lazy_json__":"pr_json/198232206.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"6.0.1"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/198532001.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Compiler",
    "migrator_version":0
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/216616853.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"7.0.0"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/219896468.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"CompilerRebuild",
    "migrator_version":1,
    "name":"Python 3.7, GCC 7, R 3.5.1, openBLAS 0.3.2"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/238896130.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"7.0.1"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/263060387.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"8.0.0"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/269409109.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"ArchRebuild",
    "migrator_version":1,
    "name":"aarch64 and ppc64le addition"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/335475824.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"MigrationYaml",
    "migrator_object_version":1,
    "migrator_version":0,
    "name":"python38"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "bad":false,
 "conda-forge.yml":{
  "compiler_stack":"comp7",
  "max_py_ver":"37",
  "max_r_ver":"35",
  "provider":{
   "win":"azure"
  }
 },
 "feedstock_name":"llvmdev",
 "hash_type":"sha256",
 "meta_yaml":{
  "about":{
   "dev_url":"https://github.com/llvm-mirror/llvm",
   "home":"http://llvm.org/",
   "license":"LLVM-Exception",
   "license_family":"Apache",
   "license_file":"LICENSE.TXT",
   "summary":"Development headers and libraries for LLVM"
  },
  "build":{
   "merge_build_host":false,
   "number":"3",
   "skip":true
  },
  "extra":{
   "recipe-maintainers":[
    "inducer",
    "pitrou",
    "jakirkham",
    "mingwandroid",
    "mattwala",
    "SylvainCorlay",
    "isuruf",
    "inducer",
    "pitrou",
    "jakirkham",
    "mingwandroid",
    "mattwala",
    "SylvainCorlay",
    "isuruf",
    "inducer",
    "pitrou",
    "jakirkham",
    "mingwandroid",
    "mattwala",
    "SylvainCorlay",
    "isuruf"
   ]
  },
  "outputs":[
   {
    "build":{
     "activate_in_script":true,
     "skip":true
    },
    "name":"llvmdev",
    "requirements":{
     "build":[
      "vs2017_",
      "cmake",
      "ninja",
      "python    >=3"
     ],
     "host":[
      "subpackage_stub",
      "subpackage_stub"
     ],
     "run":[
      "subpackage_stub",
      "subpackage_stub"
     ]
    },
    "script":"install_llvm.bat",
    "test":{
     "commands":[
      "if not exist %LIBRARY_INC%\\\\llvm\\\\Pass.h exit 1",
      "if not exist \"%LIBRARY_PREFIX%\"\\\\libexec\\llvm\\not.exe exit 1"
     ]
    }
   },
   {
    "build":{
     "activate_in_script":true,
     "skip":true
    },
    "name":"libllvm9",
    "requirements":{
     "build":[
      "vs2017_"
     ],
     "host":null,
     "run":null
    },
    "test":{
     "commands":null
    }
   },
   {
    "build":{
     "skip":true
    },
    "name":"llvm",
    "requirements":{
     "build":null,
     "host":null
    },
    "test":{
     "commands":[
      "echo \"Hello World!\""
     ]
    }
   },
   {
    "build":{
     "activate_in_script":true,
     "skip":true
    },
    "name":"llvm-tools",
    "requirements":{
     "build":[
      "vs2017_",
      "cmake",
      "ninja",
      "python    >=3"
     ],
     "host":[
      "subpackage_stub"
     ],
     "run":[
      "subpackage_stub"
     ],
     "run_constrained":[
      "llvmdev   9.0.0"
     ]
    },
    "script":"install_llvm.bat",
    "test":{
     "commands":[
      "if not exist \"%LIBRARY_BIN%\"\\\\llc.exe exit 1",
      "llc -version"
     ]
    }
   },
   {
    "build":{
     "activate_in_script":true,
     "entry_points":[
      "lit = lit:main"
     ],
     "noarch":"python",
     "script":"python -m pip install utils/lit --no-deps -vv",
     "skip":true
    },
    "name":"lit",
    "requirements":{
     "host":[
      "python >=3",
      "pip"
     ],
     "run":[
      "python"
     ]
    },
    "test":{
     "imports":[
      "lit"
     ]
    }
   },
   {
    "build":{
     "activate_in_script":true
    },
    "name":"llvmdev",
    "requirements":{
     "build":[
      "clang_bootstrap_osx-64",
      "cmake",
      "python    >=3"
     ],
     "host":[
      "subpackage_stub",
      "subpackage_stub"
     ],
     "run":[
      "subpackage_stub",
      "subpackage_stub",
      "libcxx >="
     ]
    },
    "script":"install_llvm.sh",
    "test":{
     "commands":[
      "$PREFIX/bin/llvm-config --libs",
      "test -f $PREFIX/include/llvm/Pass.h",
      "test -f $PREFIX/lib/libLLVMCore.a",
      "$PREFIX/libexec/llvm/not false"
     ]
    }
   },
   {
    "build":{
     "activate_in_script":true,
     "run_exports":[
      "subpackage_stub"
     ]
    },
    "name":"libllvm9",
    "requirements":{
     "build":[
      "clang_bootstrap_osx-64",
      "cmake",
      "python    >=3"
     ],
     "host":[
      "libcxx >="
     ],
     "run":[
      "libcxx >="
     ]
    },
    "script":"install_llvm.sh",
    "test":{
     "commands":[
      "test -f $PREFIX/lib/libLLVM-9${SHLIB_EXT}"
     ]
    }
   },
   {
    "build":{
     "run_exports":[
      "subpackage_stub"
     ]
    },
    "name":"llvm",
    "requirements":{
     "build":null,
     "host":[
      "subpackage_stub"
     ],
     "run":[
      "subpackage_stub"
     ],
     "run_constrained":[
      "llvmdev   9.0.0"
     ]
    },
    "test":{
     "commands":[
      "echo \"Hello World!\""
     ]
    }
   },
   {
    "build":{
     "activate_in_script":true
    },
    "name":"llvm-tools",
    "requirements":{
     "build":[
      "clang_bootstrap_osx-64",
      "cmake",
      "python    >=3"
     ],
     "host":[
      "subpackage_stub"
     ],
     "run":[
      "subpackage_stub"
     ],
     "run_constrained":[
      "llvmdev   9.0.0"
     ]
    },
    "script":"install_llvm.sh",
    "test":{
     "commands":[
      "$PREFIX/bin/llc -version"
     ]
    }
   },
   {
    "build":{
     "activate_in_script":true,
     "entry_points":[
      "lit = lit:main"
     ],
     "noarch":"python",
     "script":"python -m pip install utils/lit --no-deps -vv",
     "skip":true
    },
    "name":"lit",
    "requirements":{
     "host":[
      "python >=3",
      "pip"
     ],
     "run":[
      "python"
     ]
    },
    "test":{
     "imports":[
      "lit"
     ]
    }
   },
   {
    "build":{
     "activate_in_script":true
    },
    "name":"llvmdev",
    "requirements":{
     "build":[
      "cxx_compiler_stub",
      "cmake",
      "python    >=3"
     ],
     "host":[
      "subpackage_stub",
      "subpackage_stub"
     ],
     "run":[
      "subpackage_stub",
      "subpackage_stub"
     ]
    },
    "script":"install_llvm.sh",
    "test":{
     "commands":[
      "$PREFIX/bin/llvm-config --libs",
      "test -f $PREFIX/include/llvm/Pass.h",
      "test -f $PREFIX/lib/libLLVMCore.a",
      "$PREFIX/libexec/llvm/not false"
     ]
    }
   },
   {
    "build":{
     "activate_in_script":true,
     "run_exports":[
      "subpackage_stub"
     ]
    },
    "name":"libllvm9",
    "requirements":{
     "build":[
      "cxx_compiler_stub",
      "cmake",
      "python    >=3"
     ],
     "host":null,
     "run":null
    },
    "script":"install_llvm.sh",
    "test":{
     "commands":[
      "test -f $PREFIX/lib/libLLVM-9${SHLIB_EXT}"
     ]
    }
   },
   {
    "build":{
     "run_exports":[
      "subpackage_stub"
     ]
    },
    "name":"llvm",
    "requirements":{
     "build":null,
     "host":[
      "subpackage_stub"
     ],
     "run":[
      "subpackage_stub"
     ],
     "run_constrained":[
      "llvmdev   9.0.0"
     ]
    },
    "test":{
     "commands":[
      "echo \"Hello World!\""
     ]
    }
   },
   {
    "build":{
     "activate_in_script":true
    },
    "name":"llvm-tools",
    "requirements":{
     "build":[
      "cxx_compiler_stub",
      "cmake",
      "python    >=3"
     ],
     "host":[
      "subpackage_stub"
     ],
     "run":[
      "subpackage_stub"
     ],
     "run_constrained":[
      "llvmdev   9.0.0"
     ]
    },
    "script":"install_llvm.sh",
    "test":{
     "commands":[
      "$PREFIX/bin/llc -version"
     ]
    }
   },
   {
    "build":{
     "activate_in_script":true,
     "entry_points":[
      "lit = lit:main"
     ],
     "noarch":"python",
     "script":"python -m pip install utils/lit --no-deps -vv"
    },
    "name":"lit",
    "requirements":{
     "host":[
      "python >=3",
      "pip"
     ],
     "run":[
      "python"
     ]
    },
    "test":{
     "imports":[
      "lit"
     ]
    }
   }
  ],
  "package":{
   "name":"llvm-package",
   "version":"9.0.0"
  },
  "requirements":{
   "build":[
    "vs2017_",
    "cmake",
    "ninja",
    "python    >=3",
    "make",
    "clang_bootstrap_osx-64",
    "cmake",
    "python    >=3",
    "make",
    "libcxx",
    "cxx_compiler_stub",
    "cmake",
    "python    >=3",
    "make"
   ],
   "host":null
  },
  "source":{
   "patches":[
    "patches/intel-D47188-svml-VF.patch",
    "patches/numba-0001-Revert-Limit-size-of-non-GlobalValue-name.patch",
    "patches/amd-roc-2.7.0.diff",
    "patches/intel-D47188-svml-VF.patch",
    "patches/numba-0001-Revert-Limit-size-of-non-GlobalValue-name.patch",
    "patches/amd-roc-2.7.0.diff",
    "patches/intel-D47188-svml-VF.patch",
    "patches/numba-0001-Revert-Limit-size-of-non-GlobalValue-name.patch",
    "patches/amd-roc-2.7.0.diff"
   ],
   "sha256":"d6a0565cf21f22e9b4353b2eb92622e8365000a9e90a16b09b56f8157eabfe84",
   "url":"http://releases.llvm.org/9.0.0/llvm-9.0.0.src.tar.xz"
  }
 },
 "name":"llvm-package",
 "new_version":"llvmorg-10-init",
 "outputs_names":[
  "libllvm9",
  "lit",
  "llvm",
  "llvm-tools",
  "llvmdev"
 ],
 "pinning_version":"2019.10.30",
 "raw_meta_yaml":"{% set version = \"9.0.0\" %}\n{% set sha256 = \"d6a0565cf21f22e9b4353b2eb92622e8365000a9e90a16b09b56f8157eabfe84\" %}\n\n{% set build_number = 3 %}\n{% set major_ver = version.split(\".\")[0] %}\n\npackage:\n  name: llvm-package\n  version: {{ version }}\n\nsource:\n  url: http://releases.llvm.org/{{ version }}/llvm-{{ version }}.src.tar.xz\n  sha256: {{ sha256 }}\n  patches:\n    - patches/intel-D47188-svml-VF.patch    # Fixes vectorizer and extends SVML support\n    # Revert an upstream change for Numba\n    # ref: https://github.com/numba/llvmlite/blob/v0.29.0/conda-recipes/0001-Revert-Limit-size-of-non-GlobalValue-name.patch\n    - patches/numba-0001-Revert-Limit-size-of-non-GlobalValue-name.patch\n    - patches/amd-roc-2.7.0.diff\n\nbuild:\n  number: {{ build_number }}\n  skip:  true  # [(win and vc<14) or aarch64 or ppc64le]\n  merge_build_host: False\n\nrequirements:\n  build:\n    - {{ compiler('cxx') }}            # [linux]\n    - vs2017_{{ target_platform  }}    # [win]\n    - clang_bootstrap_osx-64           # [osx]\n    - cmake\n    - ninja     # [win]\n    - python    >=3\n    - make\n    - libcxx {{cxx_compiler_version}}  # [osx]\n  host:\n    - libcxx {{cxx_compiler_version}}  # [osx]\n\noutputs:\n  # Contains everything\n  - name: llvmdev\n    script: install_llvm.sh                         # [not win]\n    script: install_llvm.bat                        # [win]\n    build:\n      skip:  true  # [(win and vc<14) or aarch64 or ppc64le]\n      activate_in_script: True\n    requirements:\n      build:\n        - {{ compiler('cxx') }}            # [linux]\n        - vs2017_{{ target_platform  }}    # [win]\n        - clang_bootstrap_osx-64           # [osx]\n        - cmake\n        - ninja     # [win]\n        - python    >=3\n      host:\n        - {{ pin_subpackage(\"libllvm\" + major_ver, exact=True) }}\n        - {{ pin_subpackage(\"llvm-tools\", exact=True) }}\n      run:\n        - {{ pin_subpackage(\"libllvm\" + major_ver, exact=True) }}\n        - {{ pin_subpackage(\"llvm-tools\", exact=True) }}\n        - libcxx >={{ cxx_compiler_version }}  # [osx]\n    test:\n      commands:\n        - $PREFIX/bin/llvm-config --libs                         # [not win]\n        - if not exist %LIBRARY_INC%\\\\llvm\\\\Pass.h exit 1        # [win]\n        - test -f $PREFIX/include/llvm/Pass.h                    # [unix]\n        - test -f $PREFIX/lib/libLLVMCore.a                      # [not win]\n        - $PREFIX/libexec/llvm/not false                               # [not win]\n        - if not exist \"%LIBRARY_PREFIX%\"\\\\libexec\\llvm\\not.exe exit 1        # [win]\n\n  # Contains the shared libraries. To make different LLVM libraries co-installable\n  # soversion is appended to the package name.\n  - name: libllvm{{ major_ver }}\n    script: install_llvm.sh                         # [not win]\n    build:\n      skip:  true  # [(win and vc<14) or aarch64 or ppc64le]\n      activate_in_script: True\n      run_exports:                                                 # [not win]\n        - {{ pin_subpackage(\"libllvm\" + major_ver, exact=True) }}  # [not win]\n    requirements:\n      build:\n        - {{ compiler('cxx') }}            # [linux]\n        - vs2017_{{ target_platform  }}    # [win]\n        - clang_bootstrap_osx-64           # [osx]\n        - cmake                    # [not win]\n        - python    >=3            # [not win]\n      host:\n        - libcxx >={{ cxx_compiler_version }}  # [osx]\n      run:\n        - libcxx >={{ cxx_compiler_version }}  # [osx]\n    test:\n      commands:\n        - test -f $PREFIX/lib/libLLVM-{{ major_ver }}${SHLIB_EXT}  # [unix]\n\n  # This is a meta package so that people can use the latest libllvm and also\n  # for run_exports\n  - name: llvm\n    build:\n      skip:  true  # [(win and vc<14) or aarch64 or ppc64le]\n      run_exports:                                                    # [not win]\n        - {{ pin_subpackage(\"libllvm\" + major_ver, max_pin=\"x.x\") }}  # [not win]\n    requirements:\n      build:\n      host:\n        - {{ pin_subpackage(\"libllvm\" + major_ver, exact=True) }}  # [not win]\n      run:                                                         # [not win]\n        - {{ pin_subpackage(\"libllvm\" + major_ver, exact=True) }}  # [not win]\n      run_constrained:                                             # [not win]\n        - llvmdev   {{ version }}                                  # [not win]\n    test:\n      commands:\n        - echo \"Hello World!\"\n\n  # Contains LLVM tools\n  - name: llvm-tools\n    script: install_llvm.sh                         # [not win]\n    script: install_llvm.bat                        # [win]\n    build:\n      skip:  true  # [(win and vc<14) or aarch64 or ppc64le]\n      activate_in_script: True\n    requirements:\n      build:\n        - {{ compiler('cxx') }}            # [linux]\n        - vs2017_{{ target_platform  }}    # [win]\n        - clang_bootstrap_osx-64           # [osx]\n        - cmake\n        - ninja     # [win]\n        - python    >=3\n      host:\n        - {{ pin_subpackage(\"libllvm\" + major_ver, exact=True) }}\n      run:\n        - {{ pin_subpackage(\"libllvm\" + major_ver, exact=True) }}\n      run_constrained:\n        - llvmdev   {{ version }}\n    test:\n      commands:\n        - $PREFIX/bin/llc -version                               # [not win]\n        - if not exist \"%LIBRARY_BIN%\"\\\\llc.exe exit 1           # [win]\n        - llc -version                                           # [win]\n\n  - name: lit\n    build:\n      noarch: python\n      script: \"python -m pip install utils/lit --no-deps -vv\"\n      activate_in_script: True\n      skip: True  # [not linux]\n      entry_points:\n        - lit = lit:main\n    requirements:\n      host:\n        - python >=3\n        - pip\n      run:\n        - python\n    test:\n      imports:\n        - lit\n\nabout:\n  home: http://llvm.org/\n  dev_url: https://github.com/llvm-mirror/llvm\n  license: LLVM-Exception\n  license_file: LICENSE.TXT\n  license_family: Apache\n  summary: Development headers and libraries for LLVM\n\nextra:\n  recipe-maintainers:\n    - inducer\n    - pitrou\n    - jakirkham\n    - mingwandroid\n    - mattwala\n    - SylvainCorlay\n    - isuruf\n",
 "req":{
  "__set__":true,
  "elements":[
   "clang_bootstrap_osx-64",
   "cmake",
   "cxx_compiler_stub",
   "libcxx",
   "make",
   "ninja",
   "pip",
   "python",
   "subpackage_stub",
   "vs2017_"
  ]
 },
 "smithy_version":"3.6.0",
 "url":"https://github.com/llvm/llvm-project/releases/download/llvmorg-8.0.1/llvm-8.0.1.src.tar.xz",
 "version":"9.0.0"
}