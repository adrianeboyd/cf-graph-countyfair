{
 "bad":{
  "exception":"HTTP Error 404: Not Found",
  "traceback":"Traceback (most recent call last):\n  File \"/root/repo/cf-scripts/conda_forge_tick/auto_tick.xsh\", line 578, in main\n    hash_type=attrs.get('hash_type', 'sha256'))\n  File \"/root/repo/cf-scripts/conda_forge_tick/auto_tick.xsh\", line 96, in run\n    migrate_return = migrator.migrate(recipe_dir, attrs, **kwargs)\n  File \"/root/repo/cf-scripts/conda_forge_tick/migrators.xsh\", line 334, in migrate\n    new_patterns = self.get_hash_patterns('meta.yaml', urls, hash_type)\n  File \"/root/repo/cf-scripts/conda_forge_tick/migrators.xsh\", line 264, in get_hash_patterns\n    hash = hash_url(url, hash_type)\n  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/rever/tools.xsh\", line 207, in hash_url\n    for b in stream_url_progress(url, verb='Hashing', quiet=quiet):\n  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/rever/tools.xsh\", line 179, in stream_url_progress\n    with urllib.request.urlopen(url) as f:\n  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 222, in urlopen\n    return opener.open(url, data, timeout)\n  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 531, in open\n    response = meth(req, response)\n  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 641, in http_response\n    'http', request, response, code, msg, hdrs)\n  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 563, in error\n    result = self._call_chain(*args)\n  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 503, in _call_chain\n    result = func(*args)\n  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 755, in http_error_302\n    return self.parent.open(new, timeout=req.timeout)\n  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 531, in open\n    response = meth(req, response)\n  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 641, in http_response\n    'http', request, response, code, msg, hdrs)\n  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 569, in error\n    return self._call_chain(*args)\n  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 503, in _call_chain\n    result = func(*args)\n  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 649, in http_error_default\n    raise HTTPError(req.full_url, code, msg, hdrs, fp)\nurllib.error.HTTPError: HTTP Error 404: Not Found\n"
 },
 "conda-forge.yml":{},
 "feedstock_name":"mongoquery",
 "hash_type":"sha256",
 "meta_yaml":{
  "about":{
   "home":"https://github.com/kapouille/mongoquery",
   "license":"Public Domain",
   "summary":"A utility library that provides a MongoDB-like query language for querying python collections. It's mainly intended to parse objects structured as fundamental types in a similar fashion to what is produced by JSON or YAML parsers.\n"
  },
  "build":{
   "noarch":"python",
   "number":"1",
   "script":"python setup.py install --single-version-externally-managed --record=record.txt"
  },
  "extra":{
   "recipe-maintainers":[
    "ericdill",
    "kapouille",
    "licode",
    "tacaswell",
    "CJ-Wright",
    "ericdill",
    "kapouille",
    "licode",
    "tacaswell",
    "CJ-Wright",
    "ericdill",
    "kapouille",
    "licode",
    "tacaswell",
    "CJ-Wright"
   ]
  },
  "package":{
   "name":"mongoquery",
   "version":"1.1.0"
  },
  "requirements":{
   "build":[
    "setuptools",
    "python",
    "setuptools",
    "python",
    "setuptools",
    "python"
   ],
   "run":[
    "python",
    "python",
    "python"
   ]
  },
  "source":{
   "fn":"mongoquery-v1.1.0.tar.gz",
   "sha256":"d1e87f6038ea074273610b6258e5af7477de61c782f6424fc7ecf3416df3e645",
   "url":"https://github.com/kapouille/mongoquery/archive/v1.1.0.tar.gz"
  },
  "test":{
   "imports":[
    "mongoquery",
    "mongoquery",
    "mongoquery"
   ]
  }
 },
 "name":"mongoquery",
 "new_version":"1.3.5",
 "raw_meta_yaml":"{% set version = \"1.1.0\" %}\n\npackage:\n    name: mongoquery\n    version: {{ version }}\n\nsource:\n    url: https://github.com/kapouille/mongoquery/archive/v{{ version }}.tar.gz\n    fn: mongoquery-v{{ version }}.tar.gz\n    sha256: d1e87f6038ea074273610b6258e5af7477de61c782f6424fc7ecf3416df3e645\n\nbuild:\n    noarch: python\n    number: 1 \n    script: python setup.py install --single-version-externally-managed --record=record.txt\n\nrequirements:\n    build:\n        - setuptools\n        - python\n    run:\n        - python\n\ntest:\n    imports:\n        - mongoquery\n\nabout:\n    home: https://github.com/kapouille/mongoquery\n    license: Public Domain\n    summary: >\n        A utility library that provides a MongoDB-like query\n        language for querying python collections. It's mainly\n        intended to parse objects structured as fundamental types in\n        a similar fashion to what is produced by JSON or YAML\n        parsers.\n\nextra:\n    recipe-maintainers:\n        - ericdill\n        - kapouille\n        - licode\n        - tacaswell\n        - CJ-Wright\n",
 "req":{
  "__set__":true,
  "elements":[
   "python",
   "setuptools"
  ]
 },
 "time":1568072475.8500302,
 "url":"https://github.com/kapouille/mongoquery/archive/v1.1.0.tar.gz",
 "version":"1.1.0"
}