{
 "PRed":[
  {
   "PR":{
    "__lazy_json__":"pr_json/198232414.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"6.0.1"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/198532033.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Compiler",
    "migrator_version":0
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/203952423.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Pinning",
    "migrator_version":0
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/216584150.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"7.0.0"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/229922085.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"CompilerRebuild",
    "migrator_version":1,
    "name":"Python 3.7, GCC 7, R 3.5.1, openBLAS 0.3.2"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/238893990.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"7.0.1"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/262806247.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"8.0.0"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/328996791.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"ArchRebuild",
    "migrator_version":1,
    "name":"aarch64 and ppc64le addition"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  }
 ],
 "bad":{
  "code":404,
  "exception":"HTTP Error 404: Not Found",
  "traceback":[
   "Traceback (most recent call last):",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/auto_tick.py\", line 659, in main",
   "    migrator_uid, pr_json = run(",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/auto_tick.py\", line 133, in run",
   "    migrate_return = migrator.migrate(recipe_dir, feedstock_ctx.attrs, **kwargs)",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/migrators/core.py\", line 644, in migrate",
   "    new_patterns = self.get_hash_patterns(\"meta.yaml\", urls, hash_type)",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/migrators/core.py\", line 523, in get_hash_patterns",
   "    hash_ = hash_url(url, hash_type)",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/site-packages/rever/tools.xsh\", line 207, in hash_url",
   "    for b in stream_url_progress(url, verb='Hashing', quiet=quiet):",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/site-packages/rever/tools.xsh\", line 179, in stream_url_progress",
   "    with urllib.request.urlopen(url) as f:",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/urllib/request.py\", line 222, in urlopen",
   "    return opener.open(url, data, timeout)",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/urllib/request.py\", line 531, in open",
   "    response = meth(req, response)",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/urllib/request.py\", line 640, in http_response",
   "    response = self.parent.error(",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/urllib/request.py\", line 569, in error",
   "    return self._call_chain(*args)",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/urllib/request.py\", line 502, in _call_chain",
   "    result = func(*args)",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/urllib/request.py\", line 649, in http_error_default",
   "    raise HTTPError(req.full_url, code, msg, hdrs, fp)",
   "urllib.error.HTTPError: HTTP Error 404: Not Found",
   ""
  ],
  "url":"http://releases.llvm.org/10-init/openmp-10-init.src.tar.xz"
 },
 "conda-forge.yml":{
  "provider":{
   "win":"azure"
  }
 },
 "feedstock_name":"openmp",
 "hash_type":"sha256",
 "meta_yaml":{
  "about":{
   "home":"http://openmp.llvm.org/",
   "license":"NCSA",
   "license_file":"LICENSE.txt",
   "summary":"The OpenMP API supports multi-platform shared-memory parallel programming in C/C++ and Fortran."
  },
  "build":{
   "number":"0",
   "skip":true
  },
  "extra":{
   "recipe-maintainers":[
    "inducer",
    "jakirkham",
    "yesimon",
    "isuruf",
    "inducer",
    "jakirkham",
    "yesimon",
    "isuruf",
    "inducer",
    "jakirkham",
    "yesimon",
    "isuruf"
   ]
  },
  "outputs":[
   {
    "build":{
     "run_exports":{
      "strong":[
       "subpackage_stub"
      ]
     }
    },
    "name":"llvm-openmp",
    "requirements":{
     "build":[
      "vs2017_",
      "cmake",
      "perl",
      "ninja"
     ],
     "host":[
      "llvmdev 9.0.0|9.0.0.*"
     ],
     "run_constrained":[
      "clangdev 9.0.0|9.0.0.*",
      "llvmdev 9.0.0|9.0.0.*",
      "openmp 9.0.0|9.0.0.*"
     ]
    },
    "script":"bld-llvm-openmp.bat"
   },
   {
    "build":{
     "run_exports":{
      "strong":[
       "subpackage_stub"
      ]
     }
    },
    "name":"llvm-openmp",
    "requirements":{
     "build":[
      "cxx_compiler_stub",
      "cmake",
      "perl"
     ],
     "host":[
      "llvmdev 9.0.0|9.0.0.*"
     ],
     "run_constrained":[
      "clangdev 9.0.0|9.0.0.*",
      "llvmdev 9.0.0|9.0.0.*",
      "openmp 9.0.0|9.0.0.*"
     ]
    },
    "script":"build-llvm-openmp.sh"
   },
   {
    "build":{
     "run_exports":{
      "strong":[
       "subpackage_stub"
      ]
     }
    },
    "name":"llvm-openmp",
    "requirements":{
     "build":[
      "cxx_compiler_stub",
      "cmake",
      "perl"
     ],
     "host":[
      "llvmdev 9.0.0|9.0.0.*"
     ],
     "run_constrained":[
      "clangdev 9.0.0|9.0.0.*",
      "llvmdev 9.0.0|9.0.0.*",
      "openmp 9.0.0|9.0.0.*"
     ]
    },
    "script":"build-llvm-openmp.sh"
   }
  ],
  "package":{
   "name":"llvm-openmp",
   "version":"9.0.0"
  },
  "source":{
   "sha256":"9979eb1133066376cc0be29d1682bc0b0e7fb541075b391061679111ae4d3b5b",
   "url":"http://releases.llvm.org/9.0.0/openmp-9.0.0.src.tar.xz"
  },
  "test":{
   "commands":[
    "if not exist %LIBRARY_BIN%\\\\libomp.dll exit 1",
    "if not exist %LIBRARY_LIB%\\\\libomp.lib exit 1",
    "if not exist %LIBRARY_INC%\\\\omp.h exit 1",
    "%LIBRARY_BIN%\\clang -v -fopenmp -I%LIBRARY_INC% -L%LIBRARY_LIB% omp_hello.c -o omp_hello.exe",
    "%cd%\\omp_hello.exe",
    "test -f $PREFIX/lib/libomp.dylib",
    "test -f $PREFIX/include/omp.h",
    "$PREFIX/bin/clang -v -fopenmp -I$PREFIX/include -L$PREFIX/lib -Wl,-rpath,$PREFIX/lib omp_hello.c -o omp_hello",
    "./omp_hello",
    "test -f $PREFIX/lib/libomp.so",
    "test -f $PREFIX/include/omp.h",
    "$PREFIX/bin/clang -v -fopenmp -I$PREFIX/include -L$PREFIX/lib -Wl,-rpath,$PREFIX/lib omp_hello.c -o omp_hello",
    "./omp_hello"
   ],
   "files":[
    "omp_hello.c",
    "omp_hello.c",
    "omp_hello.c"
   ],
   "requires":[
    "clangdev",
    "vs2017_",
    "clangdev",
    "cxx_compiler_stub",
    "clangdev",
    "cxx_compiler_stub"
   ]
  }
 },
 "name":"llvm-openmp",
 "new_version":"10-init",
 "outputs_names":[
  "llvm-openmp"
 ],
 "pinning_version":"2019.10.11",
 "raw_meta_yaml":"{% set name = \"llvm-openmp\" %}\n{% set version = \"9.0.0\" %}\n{% set sha256 = \"9979eb1133066376cc0be29d1682bc0b0e7fb541075b391061679111ae4d3b5b\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: http://releases.llvm.org/{{ version }}/openmp-{{ version }}.src.tar.xz\n  sha256: {{ sha256 }}\n\nbuild:\n  number: 0\n  skip: true  # [win and vc<14]\n\ntest:\n  requires:\n    - clangdev\n    - {{ compiler('cxx') }}  # [unix]\n    - vs2017_{{ target_platform }}  # [win]\n  commands:\n    - if not exist %LIBRARY_BIN%\\\\libomp.dll exit 1   # [win]\n    - test -f $PREFIX/lib/libomp.so                   # [linux]\n    - test -f $PREFIX/lib/libomp.dylib                # [osx]\n    - if not exist %LIBRARY_LIB%\\\\libomp.lib exit 1   # [win]\n    - if not exist %LIBRARY_INC%\\\\omp.h exit 1        # [win]\n    - test -f $PREFIX/include/omp.h                   # [unix]\n    - $PREFIX/bin/clang -v -fopenmp -I$PREFIX/include -L$PREFIX/lib -Wl,-rpath,$PREFIX/lib omp_hello.c -o omp_hello  # [not win]\n    - \"%LIBRARY_BIN%\\\\clang -v -fopenmp -I%LIBRARY_INC% -L%LIBRARY_LIB% omp_hello.c -o omp_hello.exe\"  # [win]\n    - ./omp_hello            # [unix]\n    - \"%cd%\\\\omp_hello.exe\"  # [win]\n  files:\n    - omp_hello.c\n\noutputs:\n  - name: llvm-openmp\n    script: build-llvm-openmp.sh  # [not win]\n    script: bld-llvm-openmp.bat   # [win]\n    build:\n      run_exports:\n        strong:\n          - {{ pin_subpackage(\"llvm-openmp\", max_pin=None) }}\n    requirements:\n      build:\n        - {{ compiler('cxx') }}  # [unix]\n        - vs2017_{{ target_platform }}  # [win]\n        - cmake\n        - perl\n        - ninja  # [win]\n      host:\n        - llvmdev {{ version }}|{{ version }}.*\n      run_constrained:\n        - clangdev {{ version }}|{{ version }}.*\n        - llvmdev {{ version }}|{{ version }}.*\n        - openmp {{ version }}|{{ version }}.*\n\nabout:\n  home: http://openmp.llvm.org/\n  license: NCSA\n  license_file: LICENSE.txt\n  summary: The OpenMP API supports multi-platform shared-memory parallel programming in C/C++ and Fortran.\n\nextra:\n  recipe-maintainers:\n    - inducer\n    - jakirkham\n    - yesimon\n    - isuruf\n",
 "req":{
  "__set__":true,
  "elements":[
   "cmake",
   "cxx_compiler_stub",
   "llvmdev",
   "ninja",
   "perl",
   "vs2017_"
  ]
 },
 "smithy_version":"3.6.0",
 "url":"https://github.com/llvm/llvm-project/releases/download/llvmorg-8.0.1/openmp-8.0.1.src.tar.xz",
 "version":"9.0.0"
}