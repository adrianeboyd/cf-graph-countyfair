{
 "PRed":[
  {
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"0.2"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "data":{
    "bot_rerun":false,
    "migrator_name":"CompilerRebuild",
    "migrator_version":1,
    "name":"Python 3.7, GCC 7, R 3.5.1, openBLAS 0.3.2"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/254375652.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"0.2.1"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/256376219.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"0.2.2"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/259308013.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"0.2.3"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/263735546.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"0.3"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/283019855.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"0.4"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/295003143.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"0.5"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/298138887.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"0.5.1"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/323330398.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"0.5.2"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/326753623.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"0.5.2.1"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/336094811.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"MigrationYaml",
    "migrator_object_version":1,
    "migrator_version":0,
    "name":"python38"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "bad":false,
 "conda-forge.yml":{
  "provider":{
   "win":"azure"
  }
 },
 "feedstock_name":"polyfempy",
 "hash_type":"sha256",
 "meta_yaml":{
  "about":{
   "description":"PolyFEM is a simple C++ and Python finite element library. We provide a wide set of common PDEs including:<br/>\n- Laplace\n- Helmholtz\n- Linear Elasticity\n- Saint-Venant Elasticity\n- Neo-Hookean Elasticity\n- Stokes<br/>\n\nPolyFEM simplicity lies on the interface: just pick a problem, select some boundary condition, and solve.\nNo need to construct complicated function spaces, or learn a new scripting language: everything is set-up trough a the Setting python class.\nFor instance, PolyFEM seamlessly integrates quad/hexes and tri/tets of order up to 4, and integrate state-of-the-art techniques such as the adaptive p-refinement.\nThe library is actively used in our research so expect frequent updates, fixes, and new features!\n",
   "dev_url":"https://github.com/polyfem/polyfem-python",
   "doc_url":"https://polyfem.github.io/",
   "home":"https://polyfem.github.io/",
   "license":"MIT",
   "license_family":"MIT",
   "license_file":"LICENSE.txt",
   "summary":"Easy-to-use powerfull finite element library based on Polyfem"
  },
  "build":{
   "number":"0",
   "script":[
    "set \"CMAKE_GENERATOR=NMake Makefiles\"",
    "-m pip install . --no-deps -vv",
    "-m pip install . --no-deps -vv",
    "-m pip install . --no-deps -vv"
   ]
  },
  "extra":{
   "recipe-maintainers":[
    "teseoch",
    "teseoch",
    "teseoch"
   ]
  },
  "package":{
   "name":"polyfempy",
   "version":"0.5.2"
  },
  "requirements":{
   "build":[
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make"
   ],
   "host":[
    "python",
    "pip",
    "libblas",
    "libcblas",
    "numpy",
    "python",
    "pip",
    "libblas",
    "libcblas",
    "numpy",
    "suitesparse",
    "python",
    "pip",
    "libblas",
    "libcblas",
    "numpy",
    "suitesparse"
   ],
   "run":[
    "python",
    "compatible_pin_stub",
    "python",
    "compatible_pin_stub",
    "suitesparse",
    "python",
    "compatible_pin_stub",
    "suitesparse"
   ]
  },
  "source":{
   "sha256":"b7d83e631c69bb455531f72e1ba173d005e8c2f06698384e5f9d4e19e363267a",
   "url":"https://github.com/polyfem/polyfem-python/archive/0.5.2.tar.gz"
  },
  "test":{
   "imports":[
    "polyfempy",
    "polyfempy",
    "polyfempy"
   ]
  }
 },
 "name":"polyfempy",
 "new_version":"0.5.2",
 "pinning_version":"2019.11.01",
 "raw_meta_yaml":"{% set name = \"polyfempy\" %}\n{% set version = \"0.5.2\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\n\nsource:\n  url: https://github.com/polyfem/polyfem-python/archive/{{ version }}.tar.gz\n  sha256: b7d83e631c69bb455531f72e1ba173d005e8c2f06698384e5f9d4e19e363267a\n\nbuild:\n  number: 0\n  skip: True  # [py<31]\n  script:\n    - set \"CMAKE_GENERATOR=NMake Makefiles\"  # [win]\n    - {{ PYTHON }} -m pip install . --no-deps -vv\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - cmake\n    - make\n  host:\n    - python\n    - pip\n    - libblas\n    - libcblas\n    - numpy\n    - suitesparse  # [not ppc64le and not aarch64 and not win]\n  run:\n    - python\n    - {{ pin_compatible('numpy') }}\n    - suitesparse  # [not ppc64le and not aarch64 and not win]\n\ntest:\n  imports:\n    - polyfempy\n\nabout:\n  home: https://polyfem.github.io/\n\n  license: MIT\n  license_family: MIT\n  license_file: LICENSE.txt\n\n  summary: 'Easy-to-use powerfull finite element library based on Polyfem'\n\n  description: |\n    PolyFEM is a simple C++ and Python finite element library. We provide a wide set of common PDEs including:<br/>\n    - Laplace\n    - Helmholtz\n    - Linear Elasticity\n    - Saint-Venant Elasticity\n    - Neo-Hookean Elasticity\n    - Stokes<br/>\n\n    PolyFEM simplicity lies on the interface: just pick a problem, select some boundary condition, and solve.\n    No need to construct complicated function spaces, or learn a new scripting language: everything is set-up trough a the Setting python class.\n    For instance, PolyFEM seamlessly integrates quad/hexes and tri/tets of order up to 4, and integrate state-of-the-art techniques such as the adaptive p-refinement.\n    The library is actively used in our research so expect frequent updates, fixes, and new features!\n  doc_url: https://polyfem.github.io/\n  dev_url: https://github.com/polyfem/polyfem-python\n\nextra:\n  recipe-maintainers:\n    - teseoch\n",
 "req":{
  "__set__":true,
  "elements":[
   "c_compiler_stub",
   "cmake",
   "compatible_pin_stub",
   "cxx_compiler_stub",
   "libblas",
   "libcblas",
   "make",
   "numpy",
   "pip",
   "python",
   "suitesparse"
  ]
 },
 "smithy_version":"3.6.1",
 "url":"https://github.com/polyfem/polyfem-python/archive/0.5.1.tar.gz",
 "version":"0.5.2"
}