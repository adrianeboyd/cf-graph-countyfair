{
 "PRed":[
  {
   "PR":{
    "__lazy_json__":"pr_json/199916537.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Noarch",
    "migrator_version":0
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/220519903.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"CompilerRebuild",
    "migrator_version":1,
    "name":"Python 3.7, GCC 7, R 3.5.1, openBLAS 0.3.2"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  }
 ],
 "bad":{
  "code":404,
  "exception":"HTTP Error 404: Not Found",
  "traceback":[
   "Traceback (most recent call last):",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/auto_tick.xsh\", line 579, in main",
   "    hash_type=attrs.get('hash_type', 'sha256'))",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/auto_tick.xsh\", line 97, in run",
   "    migrate_return = migrator.migrate(recipe_dir, attrs, **kwargs)",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/migrators.xsh\", line 334, in migrate",
   "    new_patterns = self.get_hash_patterns('meta.yaml', urls, hash_type)",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/migrators.xsh\", line 264, in get_hash_patterns",
   "    hash = hash_url(url, hash_type)",
   "  File \"/opt/conda/envs/run_env/lib/python3.6/site-packages/rever/tools.xsh\", line 207, in hash_url",
   "    for b in stream_url_progress(url, verb='Hashing', quiet=quiet):",
   "  File \"/opt/conda/envs/run_env/lib/python3.6/site-packages/rever/tools.xsh\", line 179, in stream_url_progress",
   "    with urllib.request.urlopen(url) as f:",
   "  File \"/opt/conda/envs/run_env/lib/python3.6/urllib/request.py\", line 223, in urlopen",
   "    return opener.open(url, data, timeout)",
   "  File \"/opt/conda/envs/run_env/lib/python3.6/urllib/request.py\", line 532, in open",
   "    response = meth(req, response)",
   "  File \"/opt/conda/envs/run_env/lib/python3.6/urllib/request.py\", line 642, in http_response",
   "    'http', request, response, code, msg, hdrs)",
   "  File \"/opt/conda/envs/run_env/lib/python3.6/urllib/request.py\", line 564, in error",
   "    result = self._call_chain(*args)",
   "  File \"/opt/conda/envs/run_env/lib/python3.6/urllib/request.py\", line 504, in _call_chain",
   "    result = func(*args)",
   "  File \"/opt/conda/envs/run_env/lib/python3.6/urllib/request.py\", line 756, in http_error_302",
   "    return self.parent.open(new, timeout=req.timeout)",
   "  File \"/opt/conda/envs/run_env/lib/python3.6/urllib/request.py\", line 532, in open",
   "    response = meth(req, response)",
   "  File \"/opt/conda/envs/run_env/lib/python3.6/urllib/request.py\", line 642, in http_response",
   "    'http', request, response, code, msg, hdrs)",
   "  File \"/opt/conda/envs/run_env/lib/python3.6/urllib/request.py\", line 564, in error",
   "    result = self._call_chain(*args)",
   "  File \"/opt/conda/envs/run_env/lib/python3.6/urllib/request.py\", line 504, in _call_chain",
   "    result = func(*args)",
   "  File \"/opt/conda/envs/run_env/lib/python3.6/urllib/request.py\", line 756, in http_error_302",
   "    return self.parent.open(new, timeout=req.timeout)",
   "  File \"/opt/conda/envs/run_env/lib/python3.6/urllib/request.py\", line 532, in open",
   "    response = meth(req, response)",
   "  File \"/opt/conda/envs/run_env/lib/python3.6/urllib/request.py\", line 642, in http_response",
   "    'http', request, response, code, msg, hdrs)",
   "  File \"/opt/conda/envs/run_env/lib/python3.6/urllib/request.py\", line 570, in error",
   "    return self._call_chain(*args)",
   "  File \"/opt/conda/envs/run_env/lib/python3.6/urllib/request.py\", line 504, in _call_chain",
   "    result = func(*args)",
   "  File \"/opt/conda/envs/run_env/lib/python3.6/urllib/request.py\", line 650, in http_error_default",
   "    raise HTTPError(req.full_url, code, msg, hdrs, fp)",
   "urllib.error.HTTPError: HTTP Error 404: Not Found",
   ""
  ],
  "url":"https://files.pythonhosted.org/packages/source/P/PuLP/PuLP-1.6.10.tar.gz"
 },
 "conda-forge.yml":{
  "compiler_stack":"comp7",
  "max_py_ver":"37",
  "max_r_ver":"35"
 },
 "feedstock_name":"pulp",
 "hash_type":"sha256",
 "meta_yaml":{
  "about":{
   "dev_url":"https://github.com/coin-or/pulp",
   "doc_url":"https://pythonhosted.org/PuLP/",
   "home":"https://github.com/coin-or/pulp",
   "license":"MIT",
   "license_family":"MIT",
   "license_file":"LICENSE",
   "summary":"PuLP is an LP modeler written in python. PuLP can generate MPS or LP files\nand call GLPK, COIN CLP/CBC, CPLEX, and GUROBI to solve linear problems.\n"
  },
  "build":{
   "entry_points":[
    "pulptest = pulp:pulpTestAll",
    "pulpdoctest = pulp:pulpDoctest",
    "pulptest = pulp:pulpTestAll",
    "pulpdoctest = pulp:pulpDoctest",
    "pulptest = pulp:pulpTestAll",
    "pulpdoctest = pulp:pulpDoctest"
   ],
   "number":"1000",
   "script":"python setup.py install --single-version-externally-managed --record record.txt"
  },
  "extra":{
   "recipe-maintainers":[
    "johanneskoester",
    "christopher-schroeder",
    "johanneskoester",
    "christopher-schroeder",
    "johanneskoester",
    "christopher-schroeder"
   ]
  },
  "package":{
   "name":"pulp",
   "version":"1.6.8"
  },
  "requirements":{
   "build":[
    "python",
    "setuptools",
    "python",
    "setuptools",
    "python",
    "setuptools"
   ],
   "run":[
    "python",
    "pyparsing >=2.0.1",
    "python",
    "pyparsing >=2.0.1",
    "python",
    "pyparsing >=2.0.1"
   ]
  },
  "source":{
   "fn":"PuLP-1.6.8.tar.gz",
   "sha256":"cfecd6a78c2b08539dc29b7e8281f43d729b1089bdb5e491c3c0956aadbb3fc7",
   "url":"https://pypi.io/packages/source/P/PuLP/PuLP-1.6.8.tar.gz"
  },
  "test":{
   "commands":[
    "pulptest --help",
    "pulptest --help",
    "pulptest --help"
   ],
   "imports":[
    "pulp",
    "pulp.solverdir",
    "pulp",
    "pulp.solverdir",
    "pulp",
    "pulp.solverdir"
   ]
  }
 },
 "name":"pulp",
 "new_version":"1.6.10",
 "pinning_version":"2018.10.01",
 "raw_meta_yaml":"{% set version = \"1.6.8\" %}\n\npackage:\n  name: pulp\n  version: '{{ version }}'\n\nsource:\n  sha256: cfecd6a78c2b08539dc29b7e8281f43d729b1089bdb5e491c3c0956aadbb3fc7\n  fn: 'PuLP-{{ version }}.tar.gz'\n  url: https://pypi.io/packages/source/P/PuLP/PuLP-{{ version }}.tar.gz\n\nbuild:\n  entry_points:\n    - pulptest = pulp:pulpTestAll\n    - pulpdoctest = pulp:pulpDoctest\n  number: 1000\n  script: python setup.py install --single-version-externally-managed --record record.txt\n\nrequirements:\n  build:\n    - python\n    - setuptools\n  run:\n    - python\n    - pyparsing >=2.0.1\n\ntest:\n  commands:\n    - pulptest --help\n  imports:\n    - pulp\n    - pulp.solverdir\n\nabout:\n  summary: |\n    PuLP is an LP modeler written in python. PuLP can generate MPS or LP files\n    and call GLPK, COIN CLP/CBC, CPLEX, and GUROBI to solve linear problems.\n  home: https://github.com/coin-or/pulp\n  license: MIT\n  license_file: LICENSE\n  doc_url: https://pythonhosted.org/PuLP/\n  dev_url: https://github.com/coin-or/pulp\n  license_family: MIT\n\nextra:\n  recipe-maintainers:\n    - johanneskoester\n    - christopher-schroeder\n",
 "req":{
  "__set__":true,
  "elements":[
   "pyparsing",
   "python",
   "setuptools"
  ]
 },
 "smithy_version":"3.1.12",
 "time":1568135287.9697814,
 "url":"https://pypi.io/packages/source/P/PuLP/PuLP-1.6.8.tar.gz",
 "version":"1.6.8"
}