{
 "PRed":[
  {
   "PR":{
    "__lazy_json__":"pr_json/335673559.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"MigrationYaml",
    "migrator_object_version":1,
    "migrator_version":0,
    "name":"python38"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "bad":{
  "code":404,
  "exception":"HTTP Error 404: Not Found",
  "traceback":[
   "Traceback (most recent call last):",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/auto_tick.py\", line 659, in main",
   "    migrator_uid, pr_json = run(",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/auto_tick.py\", line 133, in run",
   "    migrate_return = migrator.migrate(recipe_dir, feedstock_ctx.attrs, **kwargs)",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/migrators/core.py\", line 644, in migrate",
   "    new_patterns = self.get_hash_patterns(\"meta.yaml\", urls, hash_type)",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/migrators/core.py\", line 523, in get_hash_patterns",
   "    hash_ = hash_url(url, hash_type)",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/site-packages/rever/tools.xsh\", line 207, in hash_url",
   "    for b in stream_url_progress(url, verb='Hashing', quiet=quiet):",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/site-packages/rever/tools.xsh\", line 179, in stream_url_progress",
   "    with urllib.request.urlopen(url) as f:",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/urllib/request.py\", line 222, in urlopen",
   "    return opener.open(url, data, timeout)",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/urllib/request.py\", line 531, in open",
   "    response = meth(req, response)",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/urllib/request.py\", line 640, in http_response",
   "    response = self.parent.error(",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/urllib/request.py\", line 563, in error",
   "    result = self._call_chain(*args)",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/urllib/request.py\", line 502, in _call_chain",
   "    result = func(*args)",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/urllib/request.py\", line 755, in http_error_302",
   "    return self.parent.open(new, timeout=req.timeout)",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/urllib/request.py\", line 531, in open",
   "    response = meth(req, response)",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/urllib/request.py\", line 640, in http_response",
   "    response = self.parent.error(",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/urllib/request.py\", line 569, in error",
   "    return self._call_chain(*args)",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/urllib/request.py\", line 502, in _call_chain",
   "    result = func(*args)",
   "  File \"/opt/conda/envs/run_env/lib/python3.8/urllib/request.py\", line 649, in http_error_default",
   "    raise HTTPError(req.full_url, code, msg, hdrs, fp)",
   "urllib.error.HTTPError: HTTP Error 404: Not Found",
   ""
  ],
  "url":"https://codeload.github.com/pybind/pybind11_json/tar.gz/2.3"
 },
 "conda-forge.yml":{},
 "feedstock_name":"pybind11_json",
 "hash_type":"sha256",
 "meta_yaml":{
  "about":{
   "description":"pybind11_json is an nlohmann::json to pybind11 bridge, it allows you to\nautomatically convert nlohmann::json to py::object and the other way around.\n",
   "dev_url":"https://github.com/pybind/pybind11_json",
   "home":"http://github.com/pybind/pybind11_json",
   "license":"BSD 3-Clause",
   "license_family":"BSD",
   "license_file":"LICENSE",
   "summary":"Using nlohmann::json with pybind11"
  },
  "build":{
   "number":"1"
  },
  "extra":{
   "recipe-maintainers":[
    "SylvainCorlay",
    "JohanMabille",
    "martinRenou",
    "wjakob",
    "SylvainCorlay",
    "JohanMabille",
    "martinRenou",
    "wjakob",
    "SylvainCorlay",
    "JohanMabille",
    "martinRenou",
    "wjakob"
   ]
  },
  "package":{
   "name":"pybind11_json",
   "version":"0.2.2"
  },
  "requirements":{
   "build":[
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "cxx_compiler_stub",
    "cmake",
    "make"
   ],
   "host":[
    "python",
    "pybind11 >=2.2.4,<3.0",
    "nlohmann_json >=3.2.0,<4.0",
    "python",
    "pybind11 >=2.2.4,<3.0",
    "nlohmann_json >=3.2.0,<4.0",
    "python",
    "pybind11 >=2.2.4,<3.0",
    "nlohmann_json >=3.2.0,<4.0"
   ],
   "run":[
    "python",
    "python",
    "python"
   ]
  },
  "source":{
   "sha256":"1904b1da077261bf156a937c6131db96b64d13aa0e09719f6bdf2bde8ed46d67",
   "url":"https://github.com/pybind/pybind11_json/archive/0.2.2.tar.gz"
  },
  "test":{
   "commands":[
    "if exist %LIBRARY_INC%\\pybind11_json\\pybind11_json.hpp (exit 0) else (exit 1)",
    "if exist %LIBRARY_LIB%\\cmake\\pybind11_json\\pybind11_jsonConfig.cmake (exit 0) else (exit 1)",
    "if exist %LIBRARY_LIB%\\cmake\\pybind11_json\\pybind11_jsonConfigVersion.cmake (exit 0) else (exit 1)",
    "test -d ${PREFIX}/include/pybind11_json",
    "test -f ${PREFIX}/include/pybind11_json/pybind11_json.hpp",
    "test -f ${PREFIX}/lib/cmake/pybind11_json/pybind11_jsonConfig.cmake",
    "test -f ${PREFIX}/lib/cmake/pybind11_json/pybind11_jsonConfigVersion.cmake",
    "test -d ${PREFIX}/include/pybind11_json",
    "test -f ${PREFIX}/include/pybind11_json/pybind11_json.hpp",
    "test -f ${PREFIX}/lib/cmake/pybind11_json/pybind11_jsonConfig.cmake",
    "test -f ${PREFIX}/lib/cmake/pybind11_json/pybind11_jsonConfigVersion.cmake"
   ]
  }
 },
 "name":"pybind11_json",
 "new_version":"2.3",
 "pinning_version":"2019.11.01",
 "raw_meta_yaml":"{% set name = \"pybind11_json\" %}\n{% set version = \"0.2.2\" %}\n{% set sha256 = \"1904b1da077261bf156a937c6131db96b64d13aa0e09719f6bdf2bde8ed46d67\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/pybind/{{ name }}/archive/{{ version }}.tar.gz\n  sha256: {{ sha256 }}\n\nbuild:\n  number: 1\n\nrequirements:\n  build:\n    - {{ compiler('cxx') }}\n    - cmake\n    - ninja  # [win]\n    - make   # [unix]\n  host:\n    - python\n    - pybind11 >=2.2.4,<3.0\n    - nlohmann_json >=3.2.0,<4.0\n  run:\n    - python\n\ntest:\n  commands:\n    - test -d ${PREFIX}/include/pybind11_json                                                                # [unix]\n    - test -f ${PREFIX}/include/pybind11_json/pybind11_json.hpp                                              # [unix]\n    - test -f ${PREFIX}/lib/cmake/pybind11_json/pybind11_jsonConfig.cmake                                    # [unix]\n    - test -f ${PREFIX}/lib/cmake/pybind11_json/pybind11_jsonConfigVersion.cmake                             # [unix]\n    - if exist %LIBRARY_INC%\\pybind11_json\\pybind11_json.hpp (exit 0) else (exit 1)                          # [win]\n    - if exist %LIBRARY_LIB%\\cmake\\pybind11_json\\pybind11_jsonConfig.cmake (exit 0) else (exit 1)            # [win]\n    - if exist %LIBRARY_LIB%\\cmake\\pybind11_json\\pybind11_jsonConfigVersion.cmake (exit 0) else (exit 1)     # [win]\n\nabout:\n  home: http://github.com/pybind/pybind11_json\n  license: BSD 3-Clause\n  license_family: BSD\n  license_file: LICENSE\n  summary: 'Using nlohmann::json with pybind11'\n\n  description: |\n    pybind11_json is an nlohmann::json to pybind11 bridge, it allows you to\n    automatically convert nlohmann::json to py::object and the other way around.\n  dev_url: https://github.com/pybind/pybind11_json\n\nextra:\n  recipe-maintainers:\n    - SylvainCorlay\n    - JohanMabille\n    - martinRenou\n    - wjakob\n",
 "req":{
  "__set__":true,
  "elements":[
   "cmake",
   "cxx_compiler_stub",
   "make",
   "ninja",
   "nlohmann_json",
   "pybind11",
   "python"
  ]
 },
 "smithy_version":"3.6.1",
 "url":"https://github.com/pybind/pybind11_json/archive/0.2.2.tar.gz",
 "version":"0.2.2"
}