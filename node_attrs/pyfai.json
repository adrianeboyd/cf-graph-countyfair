{
 "PRed":[
  {
   "PR":{
    "__lazy_json__":"pr_json/198241358.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Compiler",
    "migrator_version":0
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/224344437.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"CompilerRebuild",
    "migrator_version":1,
    "name":"Python 3.7, GCC 7, R 3.5.1, openBLAS 0.3.2"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/228755479.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"0.16.0"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/239871477.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"0.17.0"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/273072042.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"0.17.1"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/279940539.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"0.18.0"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/339384343.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"MigrationYaml",
    "migrator_object_version":1,
    "migrator_version":0,
    "name":"python38"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/369601643.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"0.19.0"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/375775452.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"MatplotlibBase",
    "migrator_version":0,
    "name":"matplotlib-to-matplotlib-base"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  }
 ],
 "bad":false,
 "conda-forge.yml":{
  "compiler_stack":"comp7",
  "max_py_ver":"37",
  "max_r_ver":"35",
  "provider":{
   "win":"azure"
  }
 },
 "feedstock_name":"pyfai",
 "hash_type":"sha256",
 "meta_yaml":{
  "about":{
   "description":"pyFAI is an azimuthal integration library that tries to be fast (as fast\nas C and even more using OpenCL and GPU). It is based on histogramming of\nthe 2theta/Q positions of each (center of) pixel weighted by the intensity\nof each pixel, but parallel version uses a SparseMatrix-DenseVector\nmultiplication. Neighboring output bins get also a contribution of pixels\nnext to the border thanks to pixel splitting. Finally pyFAI provides also\ntools to calibrate the experimental setup using Debye-Scherrer rings of a\nreference compound.\n",
   "dev_url":"https://github.com/silx-kit/pyFAI/",
   "doc_url":"http://www.silx.org/doc/pyFAI/latest/",
   "home":"https://github.com/silx-kit/pyFAI/",
   "license":"MIT",
   "license_family":"MIT",
   "license_file":"copyright",
   "summary":"Python implementation of fast azimuthal integration"
  },
  "build":{
   "entry_points":[
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main",
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main",
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main"
   ],
   "number":"0"
  },
  "extra":{
   "recipe-maintainers":[
    "CJ-Wright",
    "tacaswell",
    "chiahaoliu",
    "tschoonj",
    "kif",
    "t20100",
    "CJ-Wright",
    "tacaswell",
    "chiahaoliu",
    "tschoonj",
    "kif",
    "t20100",
    "CJ-Wright",
    "tacaswell",
    "chiahaoliu",
    "tschoonj",
    "kif",
    "t20100"
   ]
  },
  "package":{
   "name":"pyfai",
   "version":"0.19.0"
  },
  "requirements":{
   "build":[
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub"
   ],
   "host":[
    "python",
    "setuptools",
    "numpy",
    "cython",
    "scipy",
    "fabio",
    "h5py",
    "pip",
    "numexpr",
    "python",
    "setuptools",
    "numpy",
    "cython",
    "scipy",
    "fabio",
    "h5py",
    "pip",
    "numexpr",
    "python",
    "setuptools",
    "numpy",
    "cython",
    "scipy",
    "fabio",
    "h5py",
    "pip",
    "numexpr"
   ],
   "run":[
    "python",
    "compatible_pin_stub",
    "fabio",
    "scipy",
    "h5py",
    "pillow",
    "lxml",
    "matplotlib",
    "silx",
    "numexpr",
    "setuptools",
    "python",
    "compatible_pin_stub",
    "fabio",
    "scipy",
    "h5py",
    "pillow",
    "lxml",
    "matplotlib",
    "silx",
    "numexpr",
    "setuptools",
    "python",
    "compatible_pin_stub",
    "fabio",
    "scipy",
    "h5py",
    "pillow",
    "lxml",
    "matplotlib",
    "silx",
    "numexpr",
    "setuptools"
   ]
  },
  "source":{
   "fn":"v0.19.0.tar.gz",
   "sha256":"1e329d2bdd6f4ddc4c70460bb0b994a33b6885bff810b11a7871d83ef8756281",
   "url":"https://github.com/silx-kit/pyFAI/archive/v0.19.0.tar.gz"
  },
  "test":{
   "imports":[
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party",
    "pyFAI.gui",
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party",
    "pyFAI.gui",
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party",
    "pyFAI.gui"
   ]
  }
 },
 "name":"pyfai",
 "new_version":"0.19.0",
 "pinning_version":"2020.02.12",
 "raw_meta_yaml":"{% set name = \"pyfai\" %}\n{% set version = \"0.19.0\" %}\n{% set sha256 = \"1e329d2bdd6f4ddc4c70460bb0b994a33b6885bff810b11a7871d83ef8756281\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  fn: v{{ version }}.tar.gz\n  url: https://github.com/silx-kit/pyFAI/archive/v{{ version }}.tar.gz\n  sha256: {{ sha256 }}\n\nbuild:\n  number: 0\n  entry_points:\n    - check_calib = pyFAI.app.check_calib:main\n    - detector2nexus = pyFAI.app.detector2nexus:main\n    - diff_map = pyFAI.app.diff_map:main\n    - diff_tomo = pyFAI.app.diff_tomo:main\n    - eiger-mask = pyFAI.app.eiger_mask:main\n    - MX-calibrate = pyFAI.app.mx_calibrate:main\n    - pyFAI-average = pyFAI.app.average:main\n    - pyFAI-benchmark = pyFAI.app.benchmark:main\n    - pyFAI-calib = pyFAI.app.calib:main\n    - pyFAI-calib2 = pyFAI.app.calib2:main\n    - pyFAI-drawmask = pyFAI.app.drawmask:main\n    - pyFAI-integrate = pyFAI.app.integrate:main\n    - pyFAI-recalib = pyFAI.app.recalib:main\n    - pyFAI-saxs = pyFAI.app.saxs:main\n    - pyFAI-waxs = pyFAI.app.waxs:main\n  skip: True  # [py2k and win]\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n  host:\n    - python\n    - setuptools\n    - numpy\n    - cython\n    - scipy\n    - fabio\n    - h5py\n    - pip\n    - numexpr\n\n  run:\n    - python\n    - {{ pin_compatible('numpy') }}\n    - fabio\n    - scipy\n    - h5py\n    - pillow\n    - lxml\n    - matplotlib\n    - silx\n    - numexpr\n    - setuptools\n\ntest:\n  imports:\n    - pyFAI\n    - pyFAI.test\n    - pyFAI.third_party\n    - pyFAI.gui\n# Bring these back when CDT/yum stuff is done\n#  commands:\n#    - pyFAI-calib -h\n\nabout:\n  home: https://github.com/silx-kit/pyFAI/\n  license: MIT\n  license_family: MIT\n  license_file: copyright\n  summary: 'Python implementation of fast azimuthal integration'\n\n  description: |\n    pyFAI is an azimuthal integration library that tries to be fast (as fast\n    as C and even more using OpenCL and GPU). It is based on histogramming of\n    the 2theta/Q positions of each (center of) pixel weighted by the intensity\n    of each pixel, but parallel version uses a SparseMatrix-DenseVector\n    multiplication. Neighboring output bins get also a contribution of pixels\n    next to the border thanks to pixel splitting. Finally pyFAI provides also\n    tools to calibrate the experimental setup using Debye-Scherrer rings of a\n    reference compound.\n  doc_url: http://www.silx.org/doc/pyFAI/latest/\n  dev_url: https://github.com/silx-kit/pyFAI/\n\nextra:\n  recipe-maintainers:\n    - CJ-Wright\n    - tacaswell\n    - chiahaoliu\n    - tschoonj\n    - kif\n    - t20100\n",
 "req":{
  "__set__":true,
  "elements":[
   "c_compiler_stub",
   "compatible_pin_stub",
   "cxx_compiler_stub",
   "cython",
   "fabio",
   "h5py",
   "lxml",
   "matplotlib",
   "numexpr",
   "numpy",
   "pillow",
   "pip",
   "python",
   "scipy",
   "setuptools",
   "silx"
  ]
 },
 "requirements":{
  "build":{
   "__set__":true,
   "elements":[
    "c_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "host":{
   "__set__":true,
   "elements":[
    "cython",
    "fabio",
    "h5py",
    "numexpr",
    "numpy",
    "pip",
    "python",
    "scipy",
    "setuptools"
   ]
  },
  "run":{
   "__set__":true,
   "elements":[
    "compatible_pin_stub",
    "fabio",
    "h5py",
    "lxml",
    "matplotlib",
    "numexpr",
    "pillow",
    "python",
    "scipy",
    "setuptools",
    "silx"
   ]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "smithy_version":"3.6.8",
 "strong_exports":false,
 "total_requirements":{
  "build":{
   "__set__":true,
   "elements":[
    "c_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "host":{
   "__set__":true,
   "elements":[
    "cython",
    "fabio",
    "h5py",
    "numexpr",
    "numpy",
    "pip",
    "python",
    "scipy",
    "setuptools"
   ]
  },
  "run":{
   "__set__":true,
   "elements":[
    "compatible_pin_stub",
    "fabio",
    "h5py",
    "lxml",
    "matplotlib",
    "numexpr",
    "pillow",
    "python",
    "scipy",
    "setuptools",
    "silx"
   ]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "url":"https://github.com/silx-kit/pyFAI/archive/v0.18.0.tar.gz",
 "version":"0.19.0"
}