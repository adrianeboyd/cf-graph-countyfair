{
 "PRed":[
  {
   "PR":{
    "__lazy_json__":"pr_json/255230411.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"1.1.0"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/291766667.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"1.2.0"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/316832875.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"1.3.0"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "bad":{
  "code":404,
  "exception":"HTTP Error 404: Not Found",
  "traceback":[
   "Traceback (most recent call last):",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/auto_tick.xsh\", line 691, in main",
   "    hash_type=attrs.get('hash_type', 'sha256'))",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/auto_tick.xsh\", line 98, in run",
   "    migrate_return = migrator.migrate(recipe_dir, attrs, **kwargs)",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/migrators.xsh\", line 465, in migrate",
   "    new_patterns = self.get_hash_patterns('meta.yaml', urls, hash_type)",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/migrators.xsh\", line 382, in get_hash_patterns",
   "    hash = hash_url(url, hash_type)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/rever/tools.xsh\", line 207, in hash_url",
   "    for b in stream_url_progress(url, verb='Hashing', quiet=quiet):",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/rever/tools.xsh\", line 179, in stream_url_progress",
   "    with urllib.request.urlopen(url) as f:",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 222, in urlopen",
   "    return opener.open(url, data, timeout)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 531, in open",
   "    response = meth(req, response)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 641, in http_response",
   "    'http', request, response, code, msg, hdrs)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 563, in error",
   "    result = self._call_chain(*args)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 503, in _call_chain",
   "    result = func(*args)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 755, in http_error_302",
   "    return self.parent.open(new, timeout=req.timeout)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 531, in open",
   "    response = meth(req, response)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 641, in http_response",
   "    'http', request, response, code, msg, hdrs)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 563, in error",
   "    result = self._call_chain(*args)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 503, in _call_chain",
   "    result = func(*args)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 755, in http_error_302",
   "    return self.parent.open(new, timeout=req.timeout)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 531, in open",
   "    response = meth(req, response)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 641, in http_response",
   "    'http', request, response, code, msg, hdrs)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 569, in error",
   "    return self._call_chain(*args)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 503, in _call_chain",
   "    result = func(*args)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/urllib/request.py\", line 649, in http_error_default",
   "    raise HTTPError(req.full_url, code, msg, hdrs, fp)",
   "urllib.error.HTTPError: HTTP Error 404: Not Found",
   ""
  ],
  "url":"https://files.pythonhosted.org/packages/source/p/pywr/pywr-1.4.0.zip"
 },
 "conda-forge.yml":{
  "provider":{
   "win":"azure"
  }
 },
 "feedstock_name":"pywr",
 "hash_type":"sha256",
 "meta_yaml":{
  "about":{
   "description":"Pywr is a tool for solving network resource allocation problems at\ndiscrete timesteps using a linear programming approach. It's principal\napplication is in resource allocation in water supply networks, although\nother uses are conceivable. It uses Cython extensions for computational\nefficiency.\n",
   "dev_url":"http://github.com/pywr/pywr",
   "doc_url":"https://pywr.github.io/pywr-docs/index.html",
   "home":"http://github.com/pywr/pywr",
   "license":"GPL-3.0",
   "license_family":"GPL",
   "license_file":"LICENSE.txt",
   "summary":"Pywr is a generalised network resource allocation model written in Python"
  },
  "build":{
   "number":"0",
   "script":"python -m pip install --no-deps --ignore-installed ."
  },
  "extra":{
   "recipe-maintainers":[
    "jetuk",
    "jetuk",
    "jetuk"
   ]
  },
  "package":{
   "name":"pywr",
   "version":"1.3.0"
  },
  "requirements":{
   "host":[
    "python",
    "pip",
    "c_compiler_stub",
    "numpy",
    "cython",
    "packaging",
    "glpk",
    "lp_solve",
    "future",
    "packaging",
    "setuptools",
    "setuptools_scm",
    "python",
    "pip",
    "c_compiler_stub",
    "numpy",
    "cython",
    "packaging",
    "glpk",
    "lp_solve",
    "future",
    "packaging",
    "setuptools",
    "setuptools_scm",
    "python",
    "pip",
    "c_compiler_stub",
    "numpy",
    "cython",
    "packaging",
    "glpk",
    "lp_solve",
    "future",
    "packaging",
    "setuptools",
    "setuptools_scm"
   ],
   "run":[
    "python",
    "compatible_pin_stub",
    "pandas",
    "networkx",
    "glpk",
    "lp_solve",
    "pytables",
    "snappy",
    "xlrd",
    "scipy",
    "future",
    "packaging",
    "jupyter",
    "matplotlib",
    "python",
    "compatible_pin_stub",
    "pandas",
    "networkx",
    "glpk",
    "lp_solve",
    "pytables",
    "xlrd",
    "scipy",
    "future",
    "packaging",
    "jupyter",
    "matplotlib",
    "python",
    "compatible_pin_stub",
    "pandas",
    "networkx",
    "glpk",
    "lp_solve",
    "pytables",
    "xlrd",
    "scipy",
    "future",
    "packaging",
    "jupyter",
    "matplotlib"
   ]
  },
  "source":{
   "sha256":"8115b92f87c6bd3899729f52462e9226e75a2a732ee92344fd41156f87e9bfbb",
   "url":"https://pypi.io/packages/source/p/pywr/pywr-1.3.0.tar.gz"
  },
  "test":{
   "imports":[
    "pywr",
    "pywr.core",
    "pywr",
    "pywr.core",
    "pywr",
    "pywr.core"
   ]
  }
 },
 "name":"pywr",
 "new_version":"1.4.0",
 "pinning_version":"2019.09.08",
 "raw_meta_yaml":"{% set name = \"pywr\" %}\n{% set version = \"1.3.0\" %}\n{% set sha256 = \"8115b92f87c6bd3899729f52462e9226e75a2a732ee92344fd41156f87e9bfbb\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: {{ sha256 }}\n\nbuild:\n  number: 0\n  skip: True  # [py<36]\n  script: python -m pip install --no-deps --ignore-installed .\n\nrequirements:\n  host:\n    - python\n    - pip\n    - {{ compiler('c') }}\n    - numpy\n    - cython\n    - packaging\n    - glpk\n    - lp_solve\n    - future\n    - packaging\n    - setuptools\n    - setuptools_scm\n  run:\n    - python\n    - {{ pin_compatible('numpy') }}\n    - pandas\n    - networkx\n    - glpk\n    - lp_solve\n    - pytables\n    # Fix pytables on windows. See https://github.com/conda-forge/pytables-feedstock/issues/31#issuecomment-410695814\n    - snappy  # [win]\n    - xlrd\n    - scipy\n    - future\n    - packaging\n    - jupyter\n    - matplotlib\n\ntest:\n  imports:\n    - pywr\n    - pywr.core\n\nabout:\n  home: http://github.com/pywr/pywr\n  license: GPL-3.0\n  license_family: GPL\n  license_file: LICENSE.txt\n  summary: 'Pywr is a generalised network resource allocation model written in Python'\n  description: |\n    Pywr is a tool for solving network resource allocation problems at\n    discrete timesteps using a linear programming approach. It's principal\n    application is in resource allocation in water supply networks, although\n    other uses are conceivable. It uses Cython extensions for computational\n    efficiency.\n  doc_url: https://pywr.github.io/pywr-docs/index.html\n  dev_url: http://github.com/pywr/pywr\n\nextra:\n  recipe-maintainers:\n    - jetuk\n",
 "req":{
  "__set__":true,
  "elements":[
   "c_compiler_stub",
   "compatible_pin_stub",
   "cython",
   "future",
   "glpk",
   "jupyter",
   "lp_solve",
   "matplotlib",
   "networkx",
   "numpy",
   "packaging",
   "pandas",
   "pip",
   "pytables",
   "python",
   "scipy",
   "setuptools",
   "setuptools_scm",
   "snappy",
   "xlrd"
  ]
 },
 "smithy_version":"3.4.5",
 "url":"https://pypi.io/packages/source/p/pywr/pywr-1.2.0.tar.gz",
 "version":"1.3.0"
}