{
 "PRed":[
  {
   "PR":{
    "__lazy_json__":"pr_json/281731908.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"2019.5.23.13.24.58"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/300095026.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"2019.6.5.13.20.47"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/306141291.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"2019.8.9.16.54.31"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/333202450.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"2019.10.28.11.59.32"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/352524310.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"2019.12.11.13.26.16"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/375517287.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"MatplotlibBase",
    "migrator_version":0,
    "name":"matplotlib-to-matplotlib-base"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/459526341.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"2020.7.30.14.3.40"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/459643630.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"2020.7.30.17.4.28"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/460345420.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"2020.7.31.12.13.31"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived":false,
 "bad":{
  "exception":"<class 'requests.exceptions.ReadTimeout'>: A connection-level exception occurred: HTTPSConnectionPool(host='api.github.com', port=443): Read timed out. (read timeout=10)",
  "traceback":[
   "Traceback (most recent call last):",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 426, in _make_request",
   "    six.raise_from(e, None)",
   "  File \"<string>\", line 3, in raise_from",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 421, in _make_request",
   "    httplib_response = conn.getresponse()",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/http/client.py\", line 1354, in getresponse",
   "    response.begin()",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/http/client.py\", line 306, in begin",
   "    version, status, reason = self._read_status()",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/http/client.py\", line 267, in _read_status",
   "    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/socket.py\", line 589, in readinto",
   "    return self._sock.recv_into(b)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/ssl.py\", line 1071, in recv_into",
   "    return self.read(nbytes, buffer)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/ssl.py\", line 929, in read",
   "    return self._sslobj.read(len, buffer)",
   "socket.timeout: The read operation timed out",
   "",
   "During handling of the above exception, another exception occurred:",
   "",
   "Traceback (most recent call last):",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/requests/adapters.py\", line 449, in send",
   "    timeout=timeout",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 727, in urlopen",
   "    method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/urllib3/util/retry.py\", line 403, in increment",
   "    raise six.reraise(type(error), error, _stacktrace)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/urllib3/packages/six.py\", line 735, in reraise",
   "    raise value",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 677, in urlopen",
   "    chunked=chunked,",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 428, in _make_request",
   "    self._raise_timeout(err=e, url=url, timeout_value=read_timeout)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 336, in _raise_timeout",
   "    self, url, \"Read timed out. (read timeout=%s)\" % timeout_value",
   "urllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool(host='api.github.com', port=443): Read timed out. (read timeout=10)",
   "",
   "During handling of the above exception, another exception occurred:",
   "",
   "Traceback (most recent call last):",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/github3/models.py\", line 196, in _request",
   "    return request_method(*args, **kwargs)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/requests/sessions.py\", line 578, in post",
   "    return self.request('POST', url, data=data, json=json, **kwargs)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/github3/session.py\", line 169, in request",
   "    response = super(GitHubSession, self).request(*args, **kwargs)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/requests/sessions.py\", line 530, in request",
   "    resp = self.send(prep, **send_kwargs)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/requests/sessions.py\", line 643, in send",
   "    r = adapter.send(request, **kwargs)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/requests/adapters.py\", line 529, in send",
   "    raise ReadTimeout(e, request=request)",
   "requests.exceptions.ReadTimeout: HTTPSConnectionPool(host='api.github.com', port=443): Read timed out. (read timeout=10)",
   "",
   "During handling of the above exception, another exception occurred:",
   "",
   "Traceback (most recent call last):",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/auto_tick.py\", line 834, in main",
   "    hash_type=attrs.get(\"hash_type\", \"sha256\"),",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/auto_tick.py\", line 262, in run",
   "    branch=branch_name,",
   "  File \"/root/repo/cf-scripts/conda_forge_tick/git_utils.py\", line 285, in push_repo",
   "    pr = repo.create_pull(title, \"master\", head, body=body)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/github3/decorators.py\", line 31, in auth_wrapper",
   "    return func(self, *args, **kwargs)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/github3/repos/repo.py\", line 1117, in create_pull",
   "    return self._create_pull(data)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/github3/repos/repo.py\", line 120, in _create_pull",
   "    json = self._json(self._post(url, data=data), 201)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/github3/models.py\", line 221, in _post",
   "    return self._request(\"post\", url, data, **kwargs)",
   "  File \"/opt/conda/envs/run_env/lib/python3.7/site-packages/github3/models.py\", line 201, in _request",
   "    raise exceptions.ConnectionError(exc)",
   "github3.exceptions.ConnectionError: <class 'requests.exceptions.ReadTimeout'>: A connection-level exception occurred: HTTPSConnectionPool(host='api.github.com', port=443): Read timed out. (read timeout=10)",
   ""
  ]
 },
 "conda-forge.yml":{},
 "feedstock_name":"scri",
 "hash_type":"sha256",
 "linux_64_meta_yaml":{
  "about":{
   "description":"This package collects a number of functions for constructing and manipulating gravitational\nwaveforms, including rotating, determining the angular velocity, finding the co-precessing and\nco-rotating frames, and applying boosts, translations, and supertranslations.\n",
   "dev_url":"https://github.com/moble/scri",
   "home":"https://github.com/moble/scri",
   "license":"MIT",
   "license_family":"MIT",
   "license_file":"LICENSE",
   "summary":"Python/numba code for manipulating time-dependent functions of spin-weighted spherical harmonics"
  },
  "build":{
   "noarch":"python",
   "number":"0",
   "script":"package_version=2020.7.30.17.4.28  -m pip install --no-deps --ignore-installed . -vv"
  },
  "extra":{
   "recipe-maintainers":[
    "moble"
   ]
  },
  "package":{
   "name":"scri",
   "version":"2020.7.30.17.4.28"
  },
  "requirements":{
   "host":[
    "python >=3",
    "pip"
   ],
   "run":[
    "python >=3",
    "numpy >=1.13",
    "scipy",
    "matplotlib-base",
    "h5py",
    "numba",
    "quaternion >=2019.7.15.12.50.36",
    "spherical_functions",
    "spinsfast",
    "sxs"
   ]
  },
  "source":{
   "sha256":"6865c1779313abaed3dc19572de7739c2e8e338abd0662af59c8411876f85951",
   "url":"https://pypi.io/packages/source/s/scri/scri-2020.7.30.17.4.28.tar.gz"
  },
  "test":{
   "imports":[
    "scri"
   ]
  }
 },
 "linux_64_requirements":{
  "build":{
   "__set__":true,
   "elements":[]
  },
  "host":{
   "__set__":true,
   "elements":[
    "pip",
    "python"
   ]
  },
  "run":{
   "__set__":true,
   "elements":[
    "h5py",
    "matplotlib-base",
    "numba",
    "numpy",
    "python",
    "quaternion",
    "scipy",
    "spherical_functions",
    "spinsfast",
    "sxs"
   ]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "meta_yaml":{
  "about":{
   "description":"This package collects a number of functions for constructing and manipulating gravitational\nwaveforms, including rotating, determining the angular velocity, finding the co-precessing and\nco-rotating frames, and applying boosts, translations, and supertranslations.\n",
   "dev_url":"https://github.com/moble/scri",
   "home":"https://github.com/moble/scri",
   "license":"MIT",
   "license_family":"MIT",
   "license_file":"LICENSE",
   "summary":"Python/numba code for manipulating time-dependent functions of spin-weighted spherical harmonics"
  },
  "build":{
   "noarch":"python",
   "number":"0",
   "script":"package_version=2020.7.30.17.4.28  -m pip install --no-deps --ignore-installed . -vv"
  },
  "extra":{
   "recipe-maintainers":[
    "moble",
    "moble",
    "moble"
   ]
  },
  "package":{
   "name":"scri",
   "version":"2020.7.30.17.4.28"
  },
  "requirements":{
   "host":[
    "python >=3",
    "pip",
    "python >=3",
    "pip",
    "python >=3",
    "pip"
   ],
   "run":[
    "python >=3",
    "numpy >=1.13",
    "scipy",
    "matplotlib-base",
    "h5py",
    "numba",
    "quaternion >=2019.7.15.12.50.36",
    "spherical_functions",
    "spinsfast",
    "sxs",
    "python >=3",
    "numpy >=1.13",
    "scipy",
    "matplotlib-base",
    "h5py",
    "numba",
    "quaternion >=2019.7.15.12.50.36",
    "spherical_functions",
    "spinsfast",
    "sxs",
    "python >=3",
    "numpy >=1.13",
    "scipy",
    "matplotlib-base",
    "h5py",
    "numba",
    "quaternion >=2019.7.15.12.50.36",
    "spherical_functions",
    "spinsfast",
    "sxs"
   ]
  },
  "source":{
   "sha256":"6865c1779313abaed3dc19572de7739c2e8e338abd0662af59c8411876f85951",
   "url":"https://pypi.io/packages/source/s/scri/scri-2020.7.30.17.4.28.tar.gz"
  },
  "test":{
   "imports":[
    "scri",
    "scri",
    "scri"
   ]
  }
 },
 "name":"scri",
 "new_version":"2020.7.31.14.10.39",
 "new_version_attempts":{
  "2020.7.30.14.3.40":1,
  "2020.7.30.17.4.28":1,
  "2020.7.31.12.13.31":1,
  "2020.7.31.14.10.39":1
 },
 "new_version_errors":{},
 "osx_64_meta_yaml":{
  "about":{
   "description":"This package collects a number of functions for constructing and manipulating gravitational\nwaveforms, including rotating, determining the angular velocity, finding the co-precessing and\nco-rotating frames, and applying boosts, translations, and supertranslations.\n",
   "dev_url":"https://github.com/moble/scri",
   "home":"https://github.com/moble/scri",
   "license":"MIT",
   "license_family":"MIT",
   "license_file":"LICENSE",
   "summary":"Python/numba code for manipulating time-dependent functions of spin-weighted spherical harmonics"
  },
  "build":{
   "noarch":"python",
   "number":"0",
   "script":"package_version=2020.7.30.17.4.28  -m pip install --no-deps --ignore-installed . -vv"
  },
  "extra":{
   "recipe-maintainers":[
    "moble"
   ]
  },
  "package":{
   "name":"scri",
   "version":"2020.7.30.17.4.28"
  },
  "requirements":{
   "host":[
    "python >=3",
    "pip"
   ],
   "run":[
    "python >=3",
    "numpy >=1.13",
    "scipy",
    "matplotlib-base",
    "h5py",
    "numba",
    "quaternion >=2019.7.15.12.50.36",
    "spherical_functions",
    "spinsfast",
    "sxs"
   ]
  },
  "source":{
   "sha256":"6865c1779313abaed3dc19572de7739c2e8e338abd0662af59c8411876f85951",
   "url":"https://pypi.io/packages/source/s/scri/scri-2020.7.30.17.4.28.tar.gz"
  },
  "test":{
   "imports":[
    "scri"
   ]
  }
 },
 "osx_64_requirements":{
  "build":{
   "__set__":true,
   "elements":[]
  },
  "host":{
   "__set__":true,
   "elements":[
    "pip",
    "python"
   ]
  },
  "run":{
   "__set__":true,
   "elements":[
    "h5py",
    "matplotlib-base",
    "numba",
    "numpy",
    "python",
    "quaternion",
    "scipy",
    "spherical_functions",
    "spinsfast",
    "sxs"
   ]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "pinning_version":"2020.07.30.14.05.10",
 "raw_meta_yaml":"{% set name = \"scri\" %}\n{% set version = \"2020.7.30.17.4.28\" %}\n{% set sha256 = \"6865c1779313abaed3dc19572de7739c2e8e338abd0662af59c8411876f85951\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: {{ sha256 }}\n\nbuild:\n  noarch: python\n  number: 0\n  script: package_version={{ version }} {{ PYTHON }} -m pip install --no-deps --ignore-installed . -vv\n\nrequirements:\n  host:\n    - python >=3\n    - pip\n  run:\n    - python >=3\n    - numpy >=1.13\n    - scipy\n    - matplotlib-base\n    - h5py\n    - numba\n    - quaternion >=2019.7.15.12.50.36\n    - spherical_functions\n    - spinsfast\n    - sxs\n\ntest:\n  imports:\n    - scri\n\nabout:\n  home: https://github.com/moble/scri\n  license: MIT\n  license_family: MIT\n  license_file: LICENSE\n  summary: Python/numba code for manipulating time-dependent functions of spin-weighted spherical harmonics\n  description: |\n    This package collects a number of functions for constructing and manipulating gravitational\n    waveforms, including rotating, determining the angular velocity, finding the co-precessing and\n    co-rotating frames, and applying boosts, translations, and supertranslations.\n  dev_url: https://github.com/moble/scri\n\nextra:\n  recipe-maintainers:\n    - moble\n",
 "req":{
  "__set__":true,
  "elements":[
   "h5py",
   "matplotlib-base",
   "numba",
   "numpy",
   "pip",
   "python",
   "quaternion",
   "scipy",
   "spherical_functions",
   "spinsfast",
   "sxs"
  ]
 },
 "requirements":{
  "build":{
   "__set__":true,
   "elements":[]
  },
  "host":{
   "__set__":true,
   "elements":[
    "pip",
    "python"
   ]
  },
  "run":{
   "__set__":true,
   "elements":[
    "h5py",
    "matplotlib-base",
    "numba",
    "numpy",
    "python",
    "quaternion",
    "scipy",
    "spherical_functions",
    "spinsfast",
    "sxs"
   ]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "smithy_version":"No azure token. Create a token and\nput it in ~/.conda-smithy/azure.token\n3.7.5",
 "strong_exports":false,
 "total_requirements":{
  "build":{
   "__set__":true,
   "elements":[]
  },
  "host":{
   "__set__":true,
   "elements":[
    "pip",
    "python >=3"
   ]
  },
  "run":{
   "__set__":true,
   "elements":[
    "h5py",
    "matplotlib-base",
    "numba",
    "numpy >=1.13",
    "python >=3",
    "quaternion >=2019.7.15.12.50.36",
    "scipy",
    "spherical_functions",
    "spinsfast",
    "sxs"
   ]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "url":"https://pypi.io/packages/source/s/scri/scri-2019.8.9.16.54.31.tar.gz",
 "version":"2020.7.30.17.4.28",
 "win_64_meta_yaml":{
  "about":{
   "description":"This package collects a number of functions for constructing and manipulating gravitational\nwaveforms, including rotating, determining the angular velocity, finding the co-precessing and\nco-rotating frames, and applying boosts, translations, and supertranslations.\n",
   "dev_url":"https://github.com/moble/scri",
   "home":"https://github.com/moble/scri",
   "license":"MIT",
   "license_family":"MIT",
   "license_file":"LICENSE",
   "summary":"Python/numba code for manipulating time-dependent functions of spin-weighted spherical harmonics"
  },
  "build":{
   "noarch":"python",
   "number":"0",
   "script":"package_version=2020.7.30.17.4.28  -m pip install --no-deps --ignore-installed . -vv"
  },
  "extra":{
   "recipe-maintainers":[
    "moble"
   ]
  },
  "package":{
   "name":"scri",
   "version":"2020.7.30.17.4.28"
  },
  "requirements":{
   "host":[
    "python >=3",
    "pip"
   ],
   "run":[
    "python >=3",
    "numpy >=1.13",
    "scipy",
    "matplotlib-base",
    "h5py",
    "numba",
    "quaternion >=2019.7.15.12.50.36",
    "spherical_functions",
    "spinsfast",
    "sxs"
   ]
  },
  "source":{
   "sha256":"6865c1779313abaed3dc19572de7739c2e8e338abd0662af59c8411876f85951",
   "url":"https://pypi.io/packages/source/s/scri/scri-2020.7.30.17.4.28.tar.gz"
  },
  "test":{
   "imports":[
    "scri"
   ]
  }
 },
 "win_64_requirements":{
  "build":{
   "__set__":true,
   "elements":[]
  },
  "host":{
   "__set__":true,
   "elements":[
    "pip",
    "python"
   ]
  },
  "run":{
   "__set__":true,
   "elements":[
    "h5py",
    "matplotlib-base",
    "numba",
    "numpy",
    "python",
    "quaternion",
    "scipy",
    "spherical_functions",
    "spinsfast",
    "sxs"
   ]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 }
}